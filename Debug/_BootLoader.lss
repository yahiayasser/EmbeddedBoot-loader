
_BootLoader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c90  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001c90  00001d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  00001d54  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00001d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001e9c  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000159b  00000000  00000000  00003bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000080  00000000  00000000  0000518f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000000ae  00000000  00000000  0000520f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d86  00000000  00000000  000052bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000072a  00000000  00000000  00006043  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000071d  00000000  00000000  0000676d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000a0  00000000  00000000  00006e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001ea  00000000  00000000  00006f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000592  00000000  00000000  00007116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <main>
      8a:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_fpadd_parts>:
      92:	a0 e0       	ldi	r26, 0x00	; 0
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__prologue_saves__>
      9e:	dc 01       	movw	r26, r24
      a0:	2b 01       	movw	r4, r22
      a2:	fa 01       	movw	r30, r20
      a4:	9c 91       	ld	r25, X
      a6:	92 30       	cpi	r25, 0x02	; 2
      a8:	08 f4       	brcc	.+2      	; 0xac <_fpadd_parts+0x1a>
      aa:	39 c1       	rjmp	.+626    	; 0x31e <_fpadd_parts+0x28c>
      ac:	eb 01       	movw	r28, r22
      ae:	88 81       	ld	r24, Y
      b0:	82 30       	cpi	r24, 0x02	; 2
      b2:	08 f4       	brcc	.+2      	; 0xb6 <_fpadd_parts+0x24>
      b4:	33 c1       	rjmp	.+614    	; 0x31c <_fpadd_parts+0x28a>
      b6:	94 30       	cpi	r25, 0x04	; 4
      b8:	69 f4       	brne	.+26     	; 0xd4 <_fpadd_parts+0x42>
      ba:	84 30       	cpi	r24, 0x04	; 4
      bc:	09 f0       	breq	.+2      	; 0xc0 <_fpadd_parts+0x2e>
      be:	2f c1       	rjmp	.+606    	; 0x31e <_fpadd_parts+0x28c>
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	9c 91       	ld	r25, X
      c4:	11 97       	sbiw	r26, 0x01	; 1
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	98 17       	cp	r25, r24
      ca:	09 f4       	brne	.+2      	; 0xce <_fpadd_parts+0x3c>
      cc:	28 c1       	rjmp	.+592    	; 0x31e <_fpadd_parts+0x28c>
      ce:	a0 e6       	ldi	r26, 0x60	; 96
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	25 c1       	rjmp	.+586    	; 0x31e <_fpadd_parts+0x28c>
      d4:	84 30       	cpi	r24, 0x04	; 4
      d6:	09 f4       	brne	.+2      	; 0xda <_fpadd_parts+0x48>
      d8:	21 c1       	rjmp	.+578    	; 0x31c <_fpadd_parts+0x28a>
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	a9 f4       	brne	.+42     	; 0x108 <_fpadd_parts+0x76>
      de:	92 30       	cpi	r25, 0x02	; 2
      e0:	09 f0       	breq	.+2      	; 0xe4 <_fpadd_parts+0x52>
      e2:	1d c1       	rjmp	.+570    	; 0x31e <_fpadd_parts+0x28c>
      e4:	9a 01       	movw	r18, r20
      e6:	ad 01       	movw	r20, r26
      e8:	88 e0       	ldi	r24, 0x08	; 8
      ea:	ea 01       	movw	r28, r20
      ec:	09 90       	ld	r0, Y+
      ee:	ae 01       	movw	r20, r28
      f0:	e9 01       	movw	r28, r18
      f2:	09 92       	st	Y+, r0
      f4:	9e 01       	movw	r18, r28
      f6:	81 50       	subi	r24, 0x01	; 1
      f8:	c1 f7       	brne	.-16     	; 0xea <_fpadd_parts+0x58>
      fa:	e2 01       	movw	r28, r4
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	9c 91       	ld	r25, X
     102:	89 23       	and	r24, r25
     104:	81 83       	std	Z+1, r24	; 0x01
     106:	08 c1       	rjmp	.+528    	; 0x318 <_fpadd_parts+0x286>
     108:	92 30       	cpi	r25, 0x02	; 2
     10a:	09 f4       	brne	.+2      	; 0x10e <_fpadd_parts+0x7c>
     10c:	07 c1       	rjmp	.+526    	; 0x31c <_fpadd_parts+0x28a>
     10e:	12 96       	adiw	r26, 0x02	; 2
     110:	2d 90       	ld	r2, X+
     112:	3c 90       	ld	r3, X
     114:	13 97       	sbiw	r26, 0x03	; 3
     116:	eb 01       	movw	r28, r22
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	9b 81       	ldd	r25, Y+3	; 0x03
     11c:	14 96       	adiw	r26, 0x04	; 4
     11e:	ad 90       	ld	r10, X+
     120:	bd 90       	ld	r11, X+
     122:	cd 90       	ld	r12, X+
     124:	dc 90       	ld	r13, X
     126:	17 97       	sbiw	r26, 0x07	; 7
     128:	ec 80       	ldd	r14, Y+4	; 0x04
     12a:	fd 80       	ldd	r15, Y+5	; 0x05
     12c:	0e 81       	ldd	r16, Y+6	; 0x06
     12e:	1f 81       	ldd	r17, Y+7	; 0x07
     130:	91 01       	movw	r18, r2
     132:	28 1b       	sub	r18, r24
     134:	39 0b       	sbc	r19, r25
     136:	b9 01       	movw	r22, r18
     138:	37 ff       	sbrs	r19, 7
     13a:	04 c0       	rjmp	.+8      	; 0x144 <_fpadd_parts+0xb2>
     13c:	66 27       	eor	r22, r22
     13e:	77 27       	eor	r23, r23
     140:	62 1b       	sub	r22, r18
     142:	73 0b       	sbc	r23, r19
     144:	60 32       	cpi	r22, 0x20	; 32
     146:	71 05       	cpc	r23, r1
     148:	0c f0       	brlt	.+2      	; 0x14c <_fpadd_parts+0xba>
     14a:	61 c0       	rjmp	.+194    	; 0x20e <_fpadd_parts+0x17c>
     14c:	12 16       	cp	r1, r18
     14e:	13 06       	cpc	r1, r19
     150:	6c f5       	brge	.+90     	; 0x1ac <_fpadd_parts+0x11a>
     152:	37 01       	movw	r6, r14
     154:	48 01       	movw	r8, r16
     156:	06 2e       	mov	r0, r22
     158:	04 c0       	rjmp	.+8      	; 0x162 <_fpadd_parts+0xd0>
     15a:	96 94       	lsr	r9
     15c:	87 94       	ror	r8
     15e:	77 94       	ror	r7
     160:	67 94       	ror	r6
     162:	0a 94       	dec	r0
     164:	d2 f7       	brpl	.-12     	; 0x15a <_fpadd_parts+0xc8>
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	04 c0       	rjmp	.+8      	; 0x178 <_fpadd_parts+0xe6>
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	44 1f       	adc	r20, r20
     176:	55 1f       	adc	r21, r21
     178:	6a 95       	dec	r22
     17a:	d2 f7       	brpl	.-12     	; 0x170 <_fpadd_parts+0xde>
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	30 40       	sbci	r19, 0x00	; 0
     180:	40 40       	sbci	r20, 0x00	; 0
     182:	50 40       	sbci	r21, 0x00	; 0
     184:	2e 21       	and	r18, r14
     186:	3f 21       	and	r19, r15
     188:	40 23       	and	r20, r16
     18a:	51 23       	and	r21, r17
     18c:	21 15       	cp	r18, r1
     18e:	31 05       	cpc	r19, r1
     190:	41 05       	cpc	r20, r1
     192:	51 05       	cpc	r21, r1
     194:	21 f0       	breq	.+8      	; 0x19e <_fpadd_parts+0x10c>
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	79 01       	movw	r14, r18
     1a0:	8a 01       	movw	r16, r20
     1a2:	e6 28       	or	r14, r6
     1a4:	f7 28       	or	r15, r7
     1a6:	08 29       	or	r16, r8
     1a8:	19 29       	or	r17, r9
     1aa:	3c c0       	rjmp	.+120    	; 0x224 <_fpadd_parts+0x192>
     1ac:	23 2b       	or	r18, r19
     1ae:	d1 f1       	breq	.+116    	; 0x224 <_fpadd_parts+0x192>
     1b0:	26 0e       	add	r2, r22
     1b2:	37 1e       	adc	r3, r23
     1b4:	35 01       	movw	r6, r10
     1b6:	46 01       	movw	r8, r12
     1b8:	06 2e       	mov	r0, r22
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0x132>
     1bc:	96 94       	lsr	r9
     1be:	87 94       	ror	r8
     1c0:	77 94       	ror	r7
     1c2:	67 94       	ror	r6
     1c4:	0a 94       	dec	r0
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0x12a>
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <_fpadd_parts+0x148>
     1d2:	22 0f       	add	r18, r18
     1d4:	33 1f       	adc	r19, r19
     1d6:	44 1f       	adc	r20, r20
     1d8:	55 1f       	adc	r21, r21
     1da:	6a 95       	dec	r22
     1dc:	d2 f7       	brpl	.-12     	; 0x1d2 <_fpadd_parts+0x140>
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	30 40       	sbci	r19, 0x00	; 0
     1e2:	40 40       	sbci	r20, 0x00	; 0
     1e4:	50 40       	sbci	r21, 0x00	; 0
     1e6:	2a 21       	and	r18, r10
     1e8:	3b 21       	and	r19, r11
     1ea:	4c 21       	and	r20, r12
     1ec:	5d 21       	and	r21, r13
     1ee:	21 15       	cp	r18, r1
     1f0:	31 05       	cpc	r19, r1
     1f2:	41 05       	cpc	r20, r1
     1f4:	51 05       	cpc	r21, r1
     1f6:	21 f0       	breq	.+8      	; 0x200 <_fpadd_parts+0x16e>
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	59 01       	movw	r10, r18
     202:	6a 01       	movw	r12, r20
     204:	a6 28       	or	r10, r6
     206:	b7 28       	or	r11, r7
     208:	c8 28       	or	r12, r8
     20a:	d9 28       	or	r13, r9
     20c:	0b c0       	rjmp	.+22     	; 0x224 <_fpadd_parts+0x192>
     20e:	82 15       	cp	r24, r2
     210:	93 05       	cpc	r25, r3
     212:	2c f0       	brlt	.+10     	; 0x21e <_fpadd_parts+0x18c>
     214:	1c 01       	movw	r2, r24
     216:	aa 24       	eor	r10, r10
     218:	bb 24       	eor	r11, r11
     21a:	65 01       	movw	r12, r10
     21c:	03 c0       	rjmp	.+6      	; 0x224 <_fpadd_parts+0x192>
     21e:	ee 24       	eor	r14, r14
     220:	ff 24       	eor	r15, r15
     222:	87 01       	movw	r16, r14
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	9c 91       	ld	r25, X
     228:	d2 01       	movw	r26, r4
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	8c 91       	ld	r24, X
     22e:	98 17       	cp	r25, r24
     230:	09 f4       	brne	.+2      	; 0x234 <_fpadd_parts+0x1a2>
     232:	45 c0       	rjmp	.+138    	; 0x2be <_fpadd_parts+0x22c>
     234:	99 23       	and	r25, r25
     236:	39 f0       	breq	.+14     	; 0x246 <_fpadd_parts+0x1b4>
     238:	a8 01       	movw	r20, r16
     23a:	97 01       	movw	r18, r14
     23c:	2a 19       	sub	r18, r10
     23e:	3b 09       	sbc	r19, r11
     240:	4c 09       	sbc	r20, r12
     242:	5d 09       	sbc	r21, r13
     244:	06 c0       	rjmp	.+12     	; 0x252 <_fpadd_parts+0x1c0>
     246:	a6 01       	movw	r20, r12
     248:	95 01       	movw	r18, r10
     24a:	2e 19       	sub	r18, r14
     24c:	3f 09       	sbc	r19, r15
     24e:	40 0b       	sbc	r20, r16
     250:	51 0b       	sbc	r21, r17
     252:	57 fd       	sbrc	r21, 7
     254:	08 c0       	rjmp	.+16     	; 0x266 <_fpadd_parts+0x1d4>
     256:	11 82       	std	Z+1, r1	; 0x01
     258:	33 82       	std	Z+3, r3	; 0x03
     25a:	22 82       	std	Z+2, r2	; 0x02
     25c:	24 83       	std	Z+4, r18	; 0x04
     25e:	35 83       	std	Z+5, r19	; 0x05
     260:	46 83       	std	Z+6, r20	; 0x06
     262:	57 83       	std	Z+7, r21	; 0x07
     264:	1d c0       	rjmp	.+58     	; 0x2a0 <_fpadd_parts+0x20e>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	81 83       	std	Z+1, r24	; 0x01
     26a:	33 82       	std	Z+3, r3	; 0x03
     26c:	22 82       	std	Z+2, r2	; 0x02
     26e:	88 27       	eor	r24, r24
     270:	99 27       	eor	r25, r25
     272:	dc 01       	movw	r26, r24
     274:	82 1b       	sub	r24, r18
     276:	93 0b       	sbc	r25, r19
     278:	a4 0b       	sbc	r26, r20
     27a:	b5 0b       	sbc	r27, r21
     27c:	84 83       	std	Z+4, r24	; 0x04
     27e:	95 83       	std	Z+5, r25	; 0x05
     280:	a6 83       	std	Z+6, r26	; 0x06
     282:	b7 83       	std	Z+7, r27	; 0x07
     284:	0d c0       	rjmp	.+26     	; 0x2a0 <_fpadd_parts+0x20e>
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	44 1f       	adc	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	24 83       	std	Z+4, r18	; 0x04
     290:	35 83       	std	Z+5, r19	; 0x05
     292:	46 83       	std	Z+6, r20	; 0x06
     294:	57 83       	std	Z+7, r21	; 0x07
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	93 83       	std	Z+3, r25	; 0x03
     29e:	82 83       	std	Z+2, r24	; 0x02
     2a0:	24 81       	ldd	r18, Z+4	; 0x04
     2a2:	35 81       	ldd	r19, Z+5	; 0x05
     2a4:	46 81       	ldd	r20, Z+6	; 0x06
     2a6:	57 81       	ldd	r21, Z+7	; 0x07
     2a8:	da 01       	movw	r26, r20
     2aa:	c9 01       	movw	r24, r18
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	a1 09       	sbc	r26, r1
     2b0:	b1 09       	sbc	r27, r1
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
     2b6:	af 4f       	sbci	r26, 0xFF	; 255
     2b8:	bf 43       	sbci	r27, 0x3F	; 63
     2ba:	28 f3       	brcs	.-54     	; 0x286 <_fpadd_parts+0x1f4>
     2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <_fpadd_parts+0x242>
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	33 82       	std	Z+3, r3	; 0x03
     2c2:	22 82       	std	Z+2, r2	; 0x02
     2c4:	ea 0c       	add	r14, r10
     2c6:	fb 1c       	adc	r15, r11
     2c8:	0c 1d       	adc	r16, r12
     2ca:	1d 1d       	adc	r17, r13
     2cc:	e4 82       	std	Z+4, r14	; 0x04
     2ce:	f5 82       	std	Z+5, r15	; 0x05
     2d0:	06 83       	std	Z+6, r16	; 0x06
     2d2:	17 83       	std	Z+7, r17	; 0x07
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 83       	st	Z, r24
     2d8:	24 81       	ldd	r18, Z+4	; 0x04
     2da:	35 81       	ldd	r19, Z+5	; 0x05
     2dc:	46 81       	ldd	r20, Z+6	; 0x06
     2de:	57 81       	ldd	r21, Z+7	; 0x07
     2e0:	57 ff       	sbrs	r21, 7
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <_fpadd_parts+0x286>
     2e4:	c9 01       	movw	r24, r18
     2e6:	aa 27       	eor	r26, r26
     2e8:	97 fd       	sbrc	r25, 7
     2ea:	a0 95       	com	r26
     2ec:	ba 2f       	mov	r27, r26
     2ee:	81 70       	andi	r24, 0x01	; 1
     2f0:	90 70       	andi	r25, 0x00	; 0
     2f2:	a0 70       	andi	r26, 0x00	; 0
     2f4:	b0 70       	andi	r27, 0x00	; 0
     2f6:	56 95       	lsr	r21
     2f8:	47 95       	ror	r20
     2fa:	37 95       	ror	r19
     2fc:	27 95       	ror	r18
     2fe:	82 2b       	or	r24, r18
     300:	93 2b       	or	r25, r19
     302:	a4 2b       	or	r26, r20
     304:	b5 2b       	or	r27, r21
     306:	84 83       	std	Z+4, r24	; 0x04
     308:	95 83       	std	Z+5, r25	; 0x05
     30a:	a6 83       	std	Z+6, r26	; 0x06
     30c:	b7 83       	std	Z+7, r27	; 0x07
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
     318:	df 01       	movw	r26, r30
     31a:	01 c0       	rjmp	.+2      	; 0x31e <_fpadd_parts+0x28c>
     31c:	d2 01       	movw	r26, r4
     31e:	cd 01       	movw	r24, r26
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	e2 e1       	ldi	r30, 0x12	; 18
     326:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__epilogue_restores__>

0000032a <__subsf3>:
     32a:	a0 e2       	ldi	r26, 0x20	; 32
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	eb e9       	ldi	r30, 0x9B	; 155
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__prologue_saves__+0x18>
     336:	69 83       	std	Y+1, r22	; 0x01
     338:	7a 83       	std	Y+2, r23	; 0x02
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	2d 83       	std	Y+5, r18	; 0x05
     340:	3e 83       	std	Y+6, r19	; 0x06
     342:	4f 83       	std	Y+7, r20	; 0x07
     344:	58 87       	std	Y+8, r21	; 0x08
     346:	e9 e0       	ldi	r30, 0x09	; 9
     348:	ee 2e       	mov	r14, r30
     34a:	f1 2c       	mov	r15, r1
     34c:	ec 0e       	add	r14, r28
     34e:	fd 1e       	adc	r15, r29
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	b7 01       	movw	r22, r14
     356:	0e 94 1c 03 	call	0x638	; 0x638 <__unpack_f>
     35a:	8e 01       	movw	r16, r28
     35c:	0f 5e       	subi	r16, 0xEF	; 239
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	ce 01       	movw	r24, r28
     362:	05 96       	adiw	r24, 0x05	; 5
     364:	b8 01       	movw	r22, r16
     366:	0e 94 1c 03 	call	0x638	; 0x638 <__unpack_f>
     36a:	8a 89       	ldd	r24, Y+18	; 0x12
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	89 27       	eor	r24, r25
     370:	8a 8b       	std	Y+18, r24	; 0x12
     372:	c7 01       	movw	r24, r14
     374:	b8 01       	movw	r22, r16
     376:	ae 01       	movw	r20, r28
     378:	47 5e       	subi	r20, 0xE7	; 231
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     380:	0e 94 47 02 	call	0x48e	; 0x48e <__pack_f>
     384:	a0 96       	adiw	r28, 0x20	; 32
     386:	e6 e0       	ldi	r30, 0x06	; 6
     388:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__epilogue_restores__+0x18>

0000038c <__addsf3>:
     38c:	a0 e2       	ldi	r26, 0x20	; 32
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	ec ec       	ldi	r30, 0xCC	; 204
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__prologue_saves__+0x18>
     398:	69 83       	std	Y+1, r22	; 0x01
     39a:	7a 83       	std	Y+2, r23	; 0x02
     39c:	8b 83       	std	Y+3, r24	; 0x03
     39e:	9c 83       	std	Y+4, r25	; 0x04
     3a0:	2d 83       	std	Y+5, r18	; 0x05
     3a2:	3e 83       	std	Y+6, r19	; 0x06
     3a4:	4f 83       	std	Y+7, r20	; 0x07
     3a6:	58 87       	std	Y+8, r21	; 0x08
     3a8:	f9 e0       	ldi	r31, 0x09	; 9
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f1 2c       	mov	r15, r1
     3ae:	ec 0e       	add	r14, r28
     3b0:	fd 1e       	adc	r15, r29
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 1c 03 	call	0x638	; 0x638 <__unpack_f>
     3bc:	8e 01       	movw	r16, r28
     3be:	0f 5e       	subi	r16, 0xEF	; 239
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	ce 01       	movw	r24, r28
     3c4:	05 96       	adiw	r24, 0x05	; 5
     3c6:	b8 01       	movw	r22, r16
     3c8:	0e 94 1c 03 	call	0x638	; 0x638 <__unpack_f>
     3cc:	c7 01       	movw	r24, r14
     3ce:	b8 01       	movw	r22, r16
     3d0:	ae 01       	movw	r20, r28
     3d2:	47 5e       	subi	r20, 0xE7	; 231
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     3da:	0e 94 47 02 	call	0x48e	; 0x48e <__pack_f>
     3de:	a0 96       	adiw	r28, 0x20	; 32
     3e0:	e6 e0       	ldi	r30, 0x06	; 6
     3e2:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__epilogue_restores__+0x18>

000003e6 <__fixsfsi>:
     3e6:	ac e0       	ldi	r26, 0x0C	; 12
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e9 ef       	ldi	r30, 0xF9	; 249
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__prologue_saves__+0x20>
     3f2:	69 83       	std	Y+1, r22	; 0x01
     3f4:	7a 83       	std	Y+2, r23	; 0x02
     3f6:	8b 83       	std	Y+3, r24	; 0x03
     3f8:	9c 83       	std	Y+4, r25	; 0x04
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	be 01       	movw	r22, r28
     400:	6b 5f       	subi	r22, 0xFB	; 251
     402:	7f 4f       	sbci	r23, 0xFF	; 255
     404:	0e 94 1c 03 	call	0x638	; 0x638 <__unpack_f>
     408:	8d 81       	ldd	r24, Y+5	; 0x05
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	61 f1       	breq	.+88     	; 0x466 <__fixsfsi+0x80>
     40e:	82 30       	cpi	r24, 0x02	; 2
     410:	50 f1       	brcs	.+84     	; 0x466 <__fixsfsi+0x80>
     412:	84 30       	cpi	r24, 0x04	; 4
     414:	21 f4       	brne	.+8      	; 0x41e <__fixsfsi+0x38>
     416:	8e 81       	ldd	r24, Y+6	; 0x06
     418:	88 23       	and	r24, r24
     41a:	51 f1       	breq	.+84     	; 0x470 <__fixsfsi+0x8a>
     41c:	2e c0       	rjmp	.+92     	; 0x47a <__fixsfsi+0x94>
     41e:	2f 81       	ldd	r18, Y+7	; 0x07
     420:	38 85       	ldd	r19, Y+8	; 0x08
     422:	37 fd       	sbrc	r19, 7
     424:	20 c0       	rjmp	.+64     	; 0x466 <__fixsfsi+0x80>
     426:	6e 81       	ldd	r22, Y+6	; 0x06
     428:	2f 31       	cpi	r18, 0x1F	; 31
     42a:	31 05       	cpc	r19, r1
     42c:	1c f0       	brlt	.+6      	; 0x434 <__fixsfsi+0x4e>
     42e:	66 23       	and	r22, r22
     430:	f9 f0       	breq	.+62     	; 0x470 <__fixsfsi+0x8a>
     432:	23 c0       	rjmp	.+70     	; 0x47a <__fixsfsi+0x94>
     434:	8e e1       	ldi	r24, 0x1E	; 30
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	82 1b       	sub	r24, r18
     43a:	93 0b       	sbc	r25, r19
     43c:	29 85       	ldd	r18, Y+9	; 0x09
     43e:	3a 85       	ldd	r19, Y+10	; 0x0a
     440:	4b 85       	ldd	r20, Y+11	; 0x0b
     442:	5c 85       	ldd	r21, Y+12	; 0x0c
     444:	04 c0       	rjmp	.+8      	; 0x44e <__fixsfsi+0x68>
     446:	56 95       	lsr	r21
     448:	47 95       	ror	r20
     44a:	37 95       	ror	r19
     44c:	27 95       	ror	r18
     44e:	8a 95       	dec	r24
     450:	d2 f7       	brpl	.-12     	; 0x446 <__fixsfsi+0x60>
     452:	66 23       	and	r22, r22
     454:	b1 f0       	breq	.+44     	; 0x482 <__fixsfsi+0x9c>
     456:	50 95       	com	r21
     458:	40 95       	com	r20
     45a:	30 95       	com	r19
     45c:	21 95       	neg	r18
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	4f 4f       	sbci	r20, 0xFF	; 255
     462:	5f 4f       	sbci	r21, 0xFF	; 255
     464:	0e c0       	rjmp	.+28     	; 0x482 <__fixsfsi+0x9c>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	09 c0       	rjmp	.+18     	; 0x482 <__fixsfsi+0x9c>
     470:	2f ef       	ldi	r18, 0xFF	; 255
     472:	3f ef       	ldi	r19, 0xFF	; 255
     474:	4f ef       	ldi	r20, 0xFF	; 255
     476:	5f e7       	ldi	r21, 0x7F	; 127
     478:	04 c0       	rjmp	.+8      	; 0x482 <__fixsfsi+0x9c>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e8       	ldi	r21, 0x80	; 128
     482:	b9 01       	movw	r22, r18
     484:	ca 01       	movw	r24, r20
     486:	2c 96       	adiw	r28, 0x0c	; 12
     488:	e2 e0       	ldi	r30, 0x02	; 2
     48a:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__epilogue_restores__+0x20>

0000048e <__pack_f>:
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	fc 01       	movw	r30, r24
     49a:	e4 80       	ldd	r14, Z+4	; 0x04
     49c:	f5 80       	ldd	r15, Z+5	; 0x05
     49e:	06 81       	ldd	r16, Z+6	; 0x06
     4a0:	17 81       	ldd	r17, Z+7	; 0x07
     4a2:	d1 80       	ldd	r13, Z+1	; 0x01
     4a4:	80 81       	ld	r24, Z
     4a6:	82 30       	cpi	r24, 0x02	; 2
     4a8:	48 f4       	brcc	.+18     	; 0x4bc <__pack_f+0x2e>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	a0 e1       	ldi	r26, 0x10	; 16
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	e8 2a       	or	r14, r24
     4b4:	f9 2a       	or	r15, r25
     4b6:	0a 2b       	or	r16, r26
     4b8:	1b 2b       	or	r17, r27
     4ba:	a5 c0       	rjmp	.+330    	; 0x606 <__pack_f+0x178>
     4bc:	84 30       	cpi	r24, 0x04	; 4
     4be:	09 f4       	brne	.+2      	; 0x4c2 <__pack_f+0x34>
     4c0:	9f c0       	rjmp	.+318    	; 0x600 <__pack_f+0x172>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	21 f4       	brne	.+8      	; 0x4ce <__pack_f+0x40>
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__pack_f+0x4a>
     4ce:	e1 14       	cp	r14, r1
     4d0:	f1 04       	cpc	r15, r1
     4d2:	01 05       	cpc	r16, r1
     4d4:	11 05       	cpc	r17, r1
     4d6:	19 f4       	brne	.+6      	; 0x4de <__pack_f+0x50>
     4d8:	e0 e0       	ldi	r30, 0x00	; 0
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	96 c0       	rjmp	.+300    	; 0x60a <__pack_f+0x17c>
     4de:	62 81       	ldd	r22, Z+2	; 0x02
     4e0:	73 81       	ldd	r23, Z+3	; 0x03
     4e2:	9f ef       	ldi	r25, 0xFF	; 255
     4e4:	62 38       	cpi	r22, 0x82	; 130
     4e6:	79 07       	cpc	r23, r25
     4e8:	0c f0       	brlt	.+2      	; 0x4ec <__pack_f+0x5e>
     4ea:	5b c0       	rjmp	.+182    	; 0x5a2 <__pack_f+0x114>
     4ec:	22 e8       	ldi	r18, 0x82	; 130
     4ee:	3f ef       	ldi	r19, 0xFF	; 255
     4f0:	26 1b       	sub	r18, r22
     4f2:	37 0b       	sbc	r19, r23
     4f4:	2a 31       	cpi	r18, 0x1A	; 26
     4f6:	31 05       	cpc	r19, r1
     4f8:	2c f0       	brlt	.+10     	; 0x504 <__pack_f+0x76>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	2a c0       	rjmp	.+84     	; 0x558 <__pack_f+0xca>
     504:	b8 01       	movw	r22, r16
     506:	a7 01       	movw	r20, r14
     508:	02 2e       	mov	r0, r18
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__pack_f+0x86>
     50c:	76 95       	lsr	r23
     50e:	67 95       	ror	r22
     510:	57 95       	ror	r21
     512:	47 95       	ror	r20
     514:	0a 94       	dec	r0
     516:	d2 f7       	brpl	.-12     	; 0x50c <__pack_f+0x7e>
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	04 c0       	rjmp	.+8      	; 0x52a <__pack_f+0x9c>
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	aa 1f       	adc	r26, r26
     528:	bb 1f       	adc	r27, r27
     52a:	2a 95       	dec	r18
     52c:	d2 f7       	brpl	.-12     	; 0x522 <__pack_f+0x94>
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	a1 09       	sbc	r26, r1
     532:	b1 09       	sbc	r27, r1
     534:	8e 21       	and	r24, r14
     536:	9f 21       	and	r25, r15
     538:	a0 23       	and	r26, r16
     53a:	b1 23       	and	r27, r17
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	a1 05       	cpc	r26, r1
     540:	b1 05       	cpc	r27, r1
     542:	21 f0       	breq	.+8      	; 0x54c <__pack_f+0xbe>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	9a 01       	movw	r18, r20
     54e:	ab 01       	movw	r20, r22
     550:	28 2b       	or	r18, r24
     552:	39 2b       	or	r19, r25
     554:	4a 2b       	or	r20, r26
     556:	5b 2b       	or	r21, r27
     558:	da 01       	movw	r26, r20
     55a:	c9 01       	movw	r24, r18
     55c:	8f 77       	andi	r24, 0x7F	; 127
     55e:	90 70       	andi	r25, 0x00	; 0
     560:	a0 70       	andi	r26, 0x00	; 0
     562:	b0 70       	andi	r27, 0x00	; 0
     564:	80 34       	cpi	r24, 0x40	; 64
     566:	91 05       	cpc	r25, r1
     568:	a1 05       	cpc	r26, r1
     56a:	b1 05       	cpc	r27, r1
     56c:	39 f4       	brne	.+14     	; 0x57c <__pack_f+0xee>
     56e:	27 ff       	sbrs	r18, 7
     570:	09 c0       	rjmp	.+18     	; 0x584 <__pack_f+0xf6>
     572:	20 5c       	subi	r18, 0xC0	; 192
     574:	3f 4f       	sbci	r19, 0xFF	; 255
     576:	4f 4f       	sbci	r20, 0xFF	; 255
     578:	5f 4f       	sbci	r21, 0xFF	; 255
     57a:	04 c0       	rjmp	.+8      	; 0x584 <__pack_f+0xf6>
     57c:	21 5c       	subi	r18, 0xC1	; 193
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	4f 4f       	sbci	r20, 0xFF	; 255
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	e0 e0       	ldi	r30, 0x00	; 0
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	20 30       	cpi	r18, 0x00	; 0
     58a:	a0 e0       	ldi	r26, 0x00	; 0
     58c:	3a 07       	cpc	r19, r26
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	4a 07       	cpc	r20, r26
     592:	a0 e4       	ldi	r26, 0x40	; 64
     594:	5a 07       	cpc	r21, r26
     596:	10 f0       	brcs	.+4      	; 0x59c <__pack_f+0x10e>
     598:	e1 e0       	ldi	r30, 0x01	; 1
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	79 01       	movw	r14, r18
     59e:	8a 01       	movw	r16, r20
     5a0:	27 c0       	rjmp	.+78     	; 0x5f0 <__pack_f+0x162>
     5a2:	60 38       	cpi	r22, 0x80	; 128
     5a4:	71 05       	cpc	r23, r1
     5a6:	64 f5       	brge	.+88     	; 0x600 <__pack_f+0x172>
     5a8:	fb 01       	movw	r30, r22
     5aa:	e1 58       	subi	r30, 0x81	; 129
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	d8 01       	movw	r26, r16
     5b0:	c7 01       	movw	r24, r14
     5b2:	8f 77       	andi	r24, 0x7F	; 127
     5b4:	90 70       	andi	r25, 0x00	; 0
     5b6:	a0 70       	andi	r26, 0x00	; 0
     5b8:	b0 70       	andi	r27, 0x00	; 0
     5ba:	80 34       	cpi	r24, 0x40	; 64
     5bc:	91 05       	cpc	r25, r1
     5be:	a1 05       	cpc	r26, r1
     5c0:	b1 05       	cpc	r27, r1
     5c2:	39 f4       	brne	.+14     	; 0x5d2 <__pack_f+0x144>
     5c4:	e7 fe       	sbrs	r14, 7
     5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <__pack_f+0x154>
     5c8:	80 e4       	ldi	r24, 0x40	; 64
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	a0 e0       	ldi	r26, 0x00	; 0
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <__pack_f+0x14c>
     5d2:	8f e3       	ldi	r24, 0x3F	; 63
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	a0 e0       	ldi	r26, 0x00	; 0
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	e8 0e       	add	r14, r24
     5dc:	f9 1e       	adc	r15, r25
     5de:	0a 1f       	adc	r16, r26
     5e0:	1b 1f       	adc	r17, r27
     5e2:	17 ff       	sbrs	r17, 7
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <__pack_f+0x162>
     5e6:	16 95       	lsr	r17
     5e8:	07 95       	ror	r16
     5ea:	f7 94       	ror	r15
     5ec:	e7 94       	ror	r14
     5ee:	31 96       	adiw	r30, 0x01	; 1
     5f0:	87 e0       	ldi	r24, 0x07	; 7
     5f2:	16 95       	lsr	r17
     5f4:	07 95       	ror	r16
     5f6:	f7 94       	ror	r15
     5f8:	e7 94       	ror	r14
     5fa:	8a 95       	dec	r24
     5fc:	d1 f7       	brne	.-12     	; 0x5f2 <__pack_f+0x164>
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <__pack_f+0x17c>
     600:	ee 24       	eor	r14, r14
     602:	ff 24       	eor	r15, r15
     604:	87 01       	movw	r16, r14
     606:	ef ef       	ldi	r30, 0xFF	; 255
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	6e 2f       	mov	r22, r30
     60c:	67 95       	ror	r22
     60e:	66 27       	eor	r22, r22
     610:	67 95       	ror	r22
     612:	90 2f       	mov	r25, r16
     614:	9f 77       	andi	r25, 0x7F	; 127
     616:	d7 94       	ror	r13
     618:	dd 24       	eor	r13, r13
     61a:	d7 94       	ror	r13
     61c:	8e 2f       	mov	r24, r30
     61e:	86 95       	lsr	r24
     620:	49 2f       	mov	r20, r25
     622:	46 2b       	or	r20, r22
     624:	58 2f       	mov	r21, r24
     626:	5d 29       	or	r21, r13
     628:	b7 01       	movw	r22, r14
     62a:	ca 01       	movw	r24, r20
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	08 95       	ret

00000638 <__unpack_f>:
     638:	fc 01       	movw	r30, r24
     63a:	db 01       	movw	r26, r22
     63c:	40 81       	ld	r20, Z
     63e:	51 81       	ldd	r21, Z+1	; 0x01
     640:	22 81       	ldd	r18, Z+2	; 0x02
     642:	62 2f       	mov	r22, r18
     644:	6f 77       	andi	r22, 0x7F	; 127
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	22 1f       	adc	r18, r18
     64a:	22 27       	eor	r18, r18
     64c:	22 1f       	adc	r18, r18
     64e:	93 81       	ldd	r25, Z+3	; 0x03
     650:	89 2f       	mov	r24, r25
     652:	88 0f       	add	r24, r24
     654:	82 2b       	or	r24, r18
     656:	28 2f       	mov	r18, r24
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	99 1f       	adc	r25, r25
     65c:	99 27       	eor	r25, r25
     65e:	99 1f       	adc	r25, r25
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	9c 93       	st	X, r25
     664:	11 97       	sbiw	r26, 0x01	; 1
     666:	21 15       	cp	r18, r1
     668:	31 05       	cpc	r19, r1
     66a:	a9 f5       	brne	.+106    	; 0x6d6 <__unpack_f+0x9e>
     66c:	41 15       	cp	r20, r1
     66e:	51 05       	cpc	r21, r1
     670:	61 05       	cpc	r22, r1
     672:	71 05       	cpc	r23, r1
     674:	11 f4       	brne	.+4      	; 0x67a <__unpack_f+0x42>
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	37 c0       	rjmp	.+110    	; 0x6e8 <__unpack_f+0xb0>
     67a:	82 e8       	ldi	r24, 0x82	; 130
     67c:	9f ef       	ldi	r25, 0xFF	; 255
     67e:	13 96       	adiw	r26, 0x03	; 3
     680:	9c 93       	st	X, r25
     682:	8e 93       	st	-X, r24
     684:	12 97       	sbiw	r26, 0x02	; 2
     686:	9a 01       	movw	r18, r20
     688:	ab 01       	movw	r20, r22
     68a:	67 e0       	ldi	r22, 0x07	; 7
     68c:	22 0f       	add	r18, r18
     68e:	33 1f       	adc	r19, r19
     690:	44 1f       	adc	r20, r20
     692:	55 1f       	adc	r21, r21
     694:	6a 95       	dec	r22
     696:	d1 f7       	brne	.-12     	; 0x68c <__unpack_f+0x54>
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	8c 93       	st	X, r24
     69c:	0d c0       	rjmp	.+26     	; 0x6b8 <__unpack_f+0x80>
     69e:	22 0f       	add	r18, r18
     6a0:	33 1f       	adc	r19, r19
     6a2:	44 1f       	adc	r20, r20
     6a4:	55 1f       	adc	r21, r21
     6a6:	12 96       	adiw	r26, 0x02	; 2
     6a8:	8d 91       	ld	r24, X+
     6aa:	9c 91       	ld	r25, X
     6ac:	13 97       	sbiw	r26, 0x03	; 3
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	13 96       	adiw	r26, 0x03	; 3
     6b2:	9c 93       	st	X, r25
     6b4:	8e 93       	st	-X, r24
     6b6:	12 97       	sbiw	r26, 0x02	; 2
     6b8:	20 30       	cpi	r18, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	38 07       	cpc	r19, r24
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	48 07       	cpc	r20, r24
     6c2:	80 e4       	ldi	r24, 0x40	; 64
     6c4:	58 07       	cpc	r21, r24
     6c6:	58 f3       	brcs	.-42     	; 0x69e <__unpack_f+0x66>
     6c8:	14 96       	adiw	r26, 0x04	; 4
     6ca:	2d 93       	st	X+, r18
     6cc:	3d 93       	st	X+, r19
     6ce:	4d 93       	st	X+, r20
     6d0:	5c 93       	st	X, r21
     6d2:	17 97       	sbiw	r26, 0x07	; 7
     6d4:	08 95       	ret
     6d6:	2f 3f       	cpi	r18, 0xFF	; 255
     6d8:	31 05       	cpc	r19, r1
     6da:	79 f4       	brne	.+30     	; 0x6fa <__unpack_f+0xc2>
     6dc:	41 15       	cp	r20, r1
     6de:	51 05       	cpc	r21, r1
     6e0:	61 05       	cpc	r22, r1
     6e2:	71 05       	cpc	r23, r1
     6e4:	19 f4       	brne	.+6      	; 0x6ec <__unpack_f+0xb4>
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	8c 93       	st	X, r24
     6ea:	08 95       	ret
     6ec:	64 ff       	sbrs	r22, 4
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <__unpack_f+0xbe>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	8c 93       	st	X, r24
     6f4:	12 c0       	rjmp	.+36     	; 0x71a <__unpack_f+0xe2>
     6f6:	1c 92       	st	X, r1
     6f8:	10 c0       	rjmp	.+32     	; 0x71a <__unpack_f+0xe2>
     6fa:	2f 57       	subi	r18, 0x7F	; 127
     6fc:	30 40       	sbci	r19, 0x00	; 0
     6fe:	13 96       	adiw	r26, 0x03	; 3
     700:	3c 93       	st	X, r19
     702:	2e 93       	st	-X, r18
     704:	12 97       	sbiw	r26, 0x02	; 2
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	8c 93       	st	X, r24
     70a:	87 e0       	ldi	r24, 0x07	; 7
     70c:	44 0f       	add	r20, r20
     70e:	55 1f       	adc	r21, r21
     710:	66 1f       	adc	r22, r22
     712:	77 1f       	adc	r23, r23
     714:	8a 95       	dec	r24
     716:	d1 f7       	brne	.-12     	; 0x70c <__unpack_f+0xd4>
     718:	70 64       	ori	r23, 0x40	; 64
     71a:	14 96       	adiw	r26, 0x04	; 4
     71c:	4d 93       	st	X+, r20
     71e:	5d 93       	st	X+, r21
     720:	6d 93       	st	X+, r22
     722:	7c 93       	st	X, r23
     724:	17 97       	sbiw	r26, 0x07	; 7
     726:	08 95       	ret

00000728 <Bootloader>:
#endif

uint8 Bootloader_Flag;

void Bootloader(void)
{
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
	HW_Init();
     730:	0e 94 86 09 	call	0x130c	; 0x130c <HW_Init>
	Bootloader_Flag = FALSE;
     734:	10 92 70 00 	sts	0x0070, r1
}
     738:	cf 91       	pop	r28
     73a:	df 91       	pop	r29
     73c:	08 95       	ret

0000073e <Bootloader_Runnable>:

void Bootloader_Runnable(void)
{
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
	if(TRUE == Bootloader_Flag)
     746:	80 91 70 00 	lds	r24, 0x0070
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	11 f4       	brne	.+4      	; 0x752 <Bootloader_Runnable+0x14>
	{
		MC_Reset();
     74e:	0e 94 9e 09 	call	0x133c	; 0x133c <MC_Reset>
	}
}
     752:	cf 91       	pop	r28
     754:	df 91       	pop	r29
     756:	08 95       	ret

00000758 <IHex_To_Binary>:

static IHex_Frame IHex_To_Binary(uint8* IHexString)
{
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	df 93       	push	r29
     760:	cf 93       	push	r28
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	c1 54       	subi	r28, 0x41	; 65
     768:	d0 40       	sbci	r29, 0x00	; 0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	9d a7       	std	Y+45, r25	; 0x2d
     776:	8c a7       	std	Y+44, r24	; 0x2c
     778:	7b a7       	std	Y+43, r23	; 0x2b
     77a:	6a a7       	std	Y+42, r22	; 0x2a
	IHex_Frame IHexFrame;
	uint8 ui8count = 0;
     77c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ui8CheckSumValue = 0;
     77e:	19 82       	std	Y+1, r1	; 0x01

	IHexFrame.valid = FALSE;
     780:	19 a6       	std	Y+41, r1	; 0x29
	IHexFrame.byte_count = (ASCII_To_HEX(IHexString[1]) << 4) | ASCII_To_HEX(IHexString[2]);
     782:	8a a5       	ldd	r24, Y+42	; 0x2a
     784:	9b a5       	ldd	r25, Y+43	; 0x2b
     786:	fc 01       	movw	r30, r24
     788:	31 96       	adiw	r30, 0x01	; 1
     78a:	80 81       	ld	r24, Z
     78c:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 95       	swap	r24
     796:	92 95       	swap	r25
     798:	90 7f       	andi	r25, 0xF0	; 240
     79a:	98 27       	eor	r25, r24
     79c:	80 7f       	andi	r24, 0xF0	; 240
     79e:	98 27       	eor	r25, r24
     7a0:	18 2f       	mov	r17, r24
     7a2:	8a a5       	ldd	r24, Y+42	; 0x2a
     7a4:	9b a5       	ldd	r25, Y+43	; 0x2b
     7a6:	fc 01       	movw	r30, r24
     7a8:	32 96       	adiw	r30, 0x02	; 2
     7aa:	80 81       	ld	r24, Z
     7ac:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     7b0:	81 2b       	or	r24, r17
     7b2:	8e a3       	std	Y+38, r24	; 0x26

	if(IHexString[0] != ':')
     7b4:	ea a5       	ldd	r30, Y+42	; 0x2a
     7b6:	fb a5       	ldd	r31, Y+43	; 0x2b
     7b8:	80 81       	ld	r24, Z
     7ba:	8a 33       	cpi	r24, 0x3A	; 58
     7bc:	09 f1       	breq	.+66     	; 0x800 <IHex_To_Binary+0xa8>
	{
		return IHexFrame;
     7be:	8c a5       	ldd	r24, Y+44	; 0x2c
     7c0:	9d a5       	ldd	r25, Y+45	; 0x2d
     7c2:	9f a7       	std	Y+47, r25	; 0x2f
     7c4:	8e a7       	std	Y+46, r24	; 0x2e
     7c6:	fe 01       	movw	r30, r28
     7c8:	33 96       	adiw	r30, 0x03	; 3
     7ca:	f9 ab       	std	Y+49, r31	; 0x31
     7cc:	e8 ab       	std	Y+48, r30	; 0x30
     7ce:	f7 e2       	ldi	r31, 0x27	; 39
     7d0:	fa ab       	std	Y+50, r31	; 0x32
     7d2:	e8 a9       	ldd	r30, Y+48	; 0x30
     7d4:	f9 a9       	ldd	r31, Y+49	; 0x31
     7d6:	00 80       	ld	r0, Z
     7d8:	88 a9       	ldd	r24, Y+48	; 0x30
     7da:	99 a9       	ldd	r25, Y+49	; 0x31
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	99 ab       	std	Y+49, r25	; 0x31
     7e0:	88 ab       	std	Y+48, r24	; 0x30
     7e2:	ee a5       	ldd	r30, Y+46	; 0x2e
     7e4:	ff a5       	ldd	r31, Y+47	; 0x2f
     7e6:	00 82       	st	Z, r0
     7e8:	8e a5       	ldd	r24, Y+46	; 0x2e
     7ea:	9f a5       	ldd	r25, Y+47	; 0x2f
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	9f a7       	std	Y+47, r25	; 0x2f
     7f0:	8e a7       	std	Y+46, r24	; 0x2e
     7f2:	9a a9       	ldd	r25, Y+50	; 0x32
     7f4:	91 50       	subi	r25, 0x01	; 1
     7f6:	9a ab       	std	Y+50, r25	; 0x32
     7f8:	ea a9       	ldd	r30, Y+50	; 0x32
     7fa:	ee 23       	and	r30, r30
     7fc:	51 f7       	brne	.-44     	; 0x7d2 <IHex_To_Binary+0x7a>
     7fe:	6e c1       	rjmp	.+732    	; 0xadc <__stack+0x27d>
	}
	else if(string_length(IHexString) < (IHexFrame.byte_count + 11))
     800:	8a a5       	ldd	r24, Y+42	; 0x2a
     802:	9b a5       	ldd	r25, Y+43	; 0x2b
     804:	0e 94 ac 05 	call	0xb58	; 0xb58 <string_length>
     808:	28 2f       	mov	r18, r24
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	8e a1       	ldd	r24, Y+38	; 0x26
     80e:	88 2f       	mov	r24, r24
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0b 96       	adiw	r24, 0x0b	; 11
     814:	28 17       	cp	r18, r24
     816:	39 07       	cpc	r19, r25
     818:	0c f5       	brge	.+66     	; 0x85c <IHex_To_Binary+0x104>
	{
		return IHexFrame;
     81a:	8c a5       	ldd	r24, Y+44	; 0x2c
     81c:	9d a5       	ldd	r25, Y+45	; 0x2d
     81e:	9c ab       	std	Y+52, r25	; 0x34
     820:	8b ab       	std	Y+51, r24	; 0x33
     822:	fe 01       	movw	r30, r28
     824:	33 96       	adiw	r30, 0x03	; 3
     826:	fe ab       	std	Y+54, r31	; 0x36
     828:	ed ab       	std	Y+53, r30	; 0x35
     82a:	f7 e2       	ldi	r31, 0x27	; 39
     82c:	ff ab       	std	Y+55, r31	; 0x37
     82e:	ed a9       	ldd	r30, Y+53	; 0x35
     830:	fe a9       	ldd	r31, Y+54	; 0x36
     832:	00 80       	ld	r0, Z
     834:	8d a9       	ldd	r24, Y+53	; 0x35
     836:	9e a9       	ldd	r25, Y+54	; 0x36
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	9e ab       	std	Y+54, r25	; 0x36
     83c:	8d ab       	std	Y+53, r24	; 0x35
     83e:	eb a9       	ldd	r30, Y+51	; 0x33
     840:	fc a9       	ldd	r31, Y+52	; 0x34
     842:	00 82       	st	Z, r0
     844:	8b a9       	ldd	r24, Y+51	; 0x33
     846:	9c a9       	ldd	r25, Y+52	; 0x34
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	9c ab       	std	Y+52, r25	; 0x34
     84c:	8b ab       	std	Y+51, r24	; 0x33
     84e:	9f a9       	ldd	r25, Y+55	; 0x37
     850:	91 50       	subi	r25, 0x01	; 1
     852:	9f ab       	std	Y+55, r25	; 0x37
     854:	ef a9       	ldd	r30, Y+55	; 0x37
     856:	ee 23       	and	r30, r30
     858:	51 f7       	brne	.-44     	; 0x82e <IHex_To_Binary+0xd6>
     85a:	40 c1       	rjmp	.+640    	; 0xadc <__stack+0x27d>
	}
	else{}

	for(ui8count = 1; ui8count < string_length(IHexString); ui8count++)
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	8a 83       	std	Y+2, r24	; 0x02
     860:	0e c0       	rjmp	.+28     	; 0x87e <__stack+0x1f>
	{
		if(ASCII_To_HEX(IHexString[ui8count]) > 0xFF){
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	28 2f       	mov	r18, r24
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	8a a5       	ldd	r24, Y+42	; 0x2a
     86a:	9b a5       	ldd	r25, Y+43	; 0x2b
     86c:	fc 01       	movw	r30, r24
     86e:	e2 0f       	add	r30, r18
     870:	f3 1f       	adc	r31, r19
     872:	80 81       	ld	r24, Z
     874:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
	{
		return IHexFrame;
	}
	else{}

	for(ui8count = 1; ui8count < string_length(IHexString); ui8count++)
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	8a 83       	std	Y+2, r24	; 0x02
     87e:	8a a5       	ldd	r24, Y+42	; 0x2a
     880:	9b a5       	ldd	r25, Y+43	; 0x2b
     882:	0e 94 ac 05 	call	0xb58	; 0xb58 <string_length>
     886:	98 2f       	mov	r25, r24
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	89 17       	cp	r24, r25
     88c:	50 f3       	brcs	.-44     	; 0x862 <__stack+0x3>
		if(ASCII_To_HEX(IHexString[ui8count]) > 0xFF){
			return IHexFrame;
		}
	}

	IHexFrame.address = (ASCII_To_HEX(IHexString[3]) << 12) | (ASCII_To_HEX(IHexString[4]) << 8) | (ASCII_To_HEX(IHexString[5]) << 4) | ASCII_To_HEX(IHexString[6]);
     88e:	8a a5       	ldd	r24, Y+42	; 0x2a
     890:	9b a5       	ldd	r25, Y+43	; 0x2b
     892:	fc 01       	movw	r30, r24
     894:	33 96       	adiw	r30, 0x03	; 3
     896:	80 81       	ld	r24, Z
     898:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	8c 01       	movw	r16, r24
     8a2:	10 2f       	mov	r17, r16
     8a4:	00 27       	eor	r16, r16
     8a6:	12 95       	swap	r17
     8a8:	10 7f       	andi	r17, 0xF0	; 240
     8aa:	8a a5       	ldd	r24, Y+42	; 0x2a
     8ac:	9b a5       	ldd	r25, Y+43	; 0x2b
     8ae:	fc 01       	movw	r30, r24
     8b0:	34 96       	adiw	r30, 0x04	; 4
     8b2:	80 81       	ld	r24, Z
     8b4:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	98 2f       	mov	r25, r24
     8be:	88 27       	eor	r24, r24
     8c0:	08 2b       	or	r16, r24
     8c2:	19 2b       	or	r17, r25
     8c4:	8a a5       	ldd	r24, Y+42	; 0x2a
     8c6:	9b a5       	ldd	r25, Y+43	; 0x2b
     8c8:	fc 01       	movw	r30, r24
     8ca:	35 96       	adiw	r30, 0x05	; 5
     8cc:	80 81       	ld	r24, Z
     8ce:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	82 95       	swap	r24
     8d8:	92 95       	swap	r25
     8da:	90 7f       	andi	r25, 0xF0	; 240
     8dc:	98 27       	eor	r25, r24
     8de:	80 7f       	andi	r24, 0xF0	; 240
     8e0:	98 27       	eor	r25, r24
     8e2:	08 2b       	or	r16, r24
     8e4:	19 2b       	or	r17, r25
     8e6:	8a a5       	ldd	r24, Y+42	; 0x2a
     8e8:	9b a5       	ldd	r25, Y+43	; 0x2b
     8ea:	fc 01       	movw	r30, r24
     8ec:	36 96       	adiw	r30, 0x06	; 6
     8ee:	80 81       	ld	r24, Z
     8f0:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     8f4:	88 2f       	mov	r24, r24
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	80 2b       	or	r24, r16
     8fa:	91 2b       	or	r25, r17
     8fc:	9d a3       	std	Y+37, r25	; 0x25
     8fe:	8c a3       	std	Y+36, r24	; 0x24
	IHexFrame.record_type = (ASCII_To_HEX(IHexString[7]) << 4) | ASCII_To_HEX(IHexString[8]);
     900:	8a a5       	ldd	r24, Y+42	; 0x2a
     902:	9b a5       	ldd	r25, Y+43	; 0x2b
     904:	fc 01       	movw	r30, r24
     906:	37 96       	adiw	r30, 0x07	; 7
     908:	80 81       	ld	r24, Z
     90a:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	82 95       	swap	r24
     914:	92 95       	swap	r25
     916:	90 7f       	andi	r25, 0xF0	; 240
     918:	98 27       	eor	r25, r24
     91a:	80 7f       	andi	r24, 0xF0	; 240
     91c:	98 27       	eor	r25, r24
     91e:	18 2f       	mov	r17, r24
     920:	8a a5       	ldd	r24, Y+42	; 0x2a
     922:	9b a5       	ldd	r25, Y+43	; 0x2b
     924:	fc 01       	movw	r30, r24
     926:	38 96       	adiw	r30, 0x08	; 8
     928:	80 81       	ld	r24, Z
     92a:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     92e:	81 2b       	or	r24, r17
     930:	8f a3       	std	Y+39, r24	; 0x27
	IHexFrame.data_container.size = IHexFrame.byte_count;
     932:	8e a1       	ldd	r24, Y+38	; 0x26
     934:	8b a3       	std	Y+35, r24	; 0x23
	IHexFrame.checksum = (ASCII_To_HEX(IHexString[IHexFrame.byte_count] + 9) << 4) | ASCII_To_HEX(IHexString[IHexFrame.byte_count] + 10);
     936:	8e a1       	ldd	r24, Y+38	; 0x26
     938:	28 2f       	mov	r18, r24
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	8a a5       	ldd	r24, Y+42	; 0x2a
     93e:	9b a5       	ldd	r25, Y+43	; 0x2b
     940:	fc 01       	movw	r30, r24
     942:	e2 0f       	add	r30, r18
     944:	f3 1f       	adc	r31, r19
     946:	80 81       	ld	r24, Z
     948:	87 5f       	subi	r24, 0xF7	; 247
     94a:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     94e:	88 2f       	mov	r24, r24
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	82 95       	swap	r24
     954:	92 95       	swap	r25
     956:	90 7f       	andi	r25, 0xF0	; 240
     958:	98 27       	eor	r25, r24
     95a:	80 7f       	andi	r24, 0xF0	; 240
     95c:	98 27       	eor	r25, r24
     95e:	18 2f       	mov	r17, r24
     960:	8e a1       	ldd	r24, Y+38	; 0x26
     962:	28 2f       	mov	r18, r24
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	8a a5       	ldd	r24, Y+42	; 0x2a
     968:	9b a5       	ldd	r25, Y+43	; 0x2b
     96a:	fc 01       	movw	r30, r24
     96c:	e2 0f       	add	r30, r18
     96e:	f3 1f       	adc	r31, r19
     970:	80 81       	ld	r24, Z
     972:	86 5f       	subi	r24, 0xF6	; 246
     974:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     978:	81 2b       	or	r24, r17
     97a:	88 a7       	std	Y+40, r24	; 0x28

	ui8CheckSumValue = IHexFrame.byte_count + IHexFrame.record_type + (IHexFrame.address >> 8) + (IHexFrame.address & 0xFF);
     97c:	9e a1       	ldd	r25, Y+38	; 0x26
     97e:	8f a1       	ldd	r24, Y+39	; 0x27
     980:	29 2f       	mov	r18, r25
     982:	28 0f       	add	r18, r24
     984:	8c a1       	ldd	r24, Y+36	; 0x24
     986:	9d a1       	ldd	r25, Y+37	; 0x25
     988:	89 2f       	mov	r24, r25
     98a:	99 27       	eor	r25, r25
     98c:	28 0f       	add	r18, r24
     98e:	8c a1       	ldd	r24, Y+36	; 0x24
     990:	9d a1       	ldd	r25, Y+37	; 0x25
     992:	82 0f       	add	r24, r18
     994:	89 83       	std	Y+1, r24	; 0x01

	for(ui8count = 0; ui8count < IHexFrame.byte_count; ui8count++)
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	42 c0       	rjmp	.+132    	; 0xa1e <__stack+0x1bf>
	{
		IHexFrame.data_container.data[ui8count] = (ASCII_To_HEX(IHexString[ui8count*2 + 9]) << 4) | ASCII_To_HEX(IHexString[ui8count*2 + 10]);
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	08 2f       	mov	r16, r24
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	9c 01       	movw	r18, r24
     9ac:	27 5f       	subi	r18, 0xF7	; 247
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	8a a5       	ldd	r24, Y+42	; 0x2a
     9b2:	9b a5       	ldd	r25, Y+43	; 0x2b
     9b4:	fc 01       	movw	r30, r24
     9b6:	e2 0f       	add	r30, r18
     9b8:	f3 1f       	adc	r31, r19
     9ba:	80 81       	ld	r24, Z
     9bc:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	82 95       	swap	r24
     9c6:	92 95       	swap	r25
     9c8:	90 7f       	andi	r25, 0xF0	; 240
     9ca:	98 27       	eor	r25, r24
     9cc:	80 7f       	andi	r24, 0xF0	; 240
     9ce:	98 27       	eor	r25, r24
     9d0:	f8 2e       	mov	r15, r24
     9d2:	8a 81       	ldd	r24, Y+2	; 0x02
     9d4:	88 2f       	mov	r24, r24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	05 96       	adiw	r24, 0x05	; 5
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	9c 01       	movw	r18, r24
     9e0:	8a a5       	ldd	r24, Y+42	; 0x2a
     9e2:	9b a5       	ldd	r25, Y+43	; 0x2b
     9e4:	fc 01       	movw	r30, r24
     9e6:	e2 0f       	add	r30, r18
     9e8:	f3 1f       	adc	r31, r19
     9ea:	80 81       	ld	r24, Z
     9ec:	0e 94 7d 05 	call	0xafa	; 0xafa <ASCII_To_HEX>
     9f0:	8f 29       	or	r24, r15
     9f2:	28 2f       	mov	r18, r24
     9f4:	ce 01       	movw	r24, r28
     9f6:	03 96       	adiw	r24, 0x03	; 3
     9f8:	fc 01       	movw	r30, r24
     9fa:	e0 0f       	add	r30, r16
     9fc:	f1 1f       	adc	r31, r17
     9fe:	20 83       	st	Z, r18
		ui8CheckSumValue += IHexFrame.data_container.data[ui8count];
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	28 2f       	mov	r18, r24
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	ce 01       	movw	r24, r28
     a08:	03 96       	adiw	r24, 0x03	; 3
     a0a:	fc 01       	movw	r30, r24
     a0c:	e2 0f       	add	r30, r18
     a0e:	f3 1f       	adc	r31, r19
     a10:	90 81       	ld	r25, Z
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	89 0f       	add	r24, r25
     a16:	89 83       	std	Y+1, r24	; 0x01
	IHexFrame.data_container.size = IHexFrame.byte_count;
	IHexFrame.checksum = (ASCII_To_HEX(IHexString[IHexFrame.byte_count] + 9) << 4) | ASCII_To_HEX(IHexString[IHexFrame.byte_count] + 10);

	ui8CheckSumValue = IHexFrame.byte_count + IHexFrame.record_type + (IHexFrame.address >> 8) + (IHexFrame.address & 0xFF);

	for(ui8count = 0; ui8count < IHexFrame.byte_count; ui8count++)
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	8f 5f       	subi	r24, 0xFF	; 255
     a1c:	8a 83       	std	Y+2, r24	; 0x02
     a1e:	9e a1       	ldd	r25, Y+38	; 0x26
     a20:	8a 81       	ldd	r24, Y+2	; 0x02
     a22:	89 17       	cp	r24, r25
     a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x1c9>
     a26:	b9 cf       	rjmp	.-142    	; 0x99a <__stack+0x13b>
	{
		IHexFrame.data_container.data[ui8count] = (ASCII_To_HEX(IHexString[ui8count*2 + 9]) << 4) | ASCII_To_HEX(IHexString[ui8count*2 + 10]);
		ui8CheckSumValue += IHexFrame.data_container.data[ui8count];
	}

	ui8CheckSumValue = (~ui8CheckSumValue) + 1;
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	81 95       	neg	r24
     a2c:	89 83       	std	Y+1, r24	; 0x01

	if(ui8CheckSumValue != IHexFrame.checksum){
     a2e:	98 a5       	ldd	r25, Y+40	; 0x28
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	98 17       	cp	r25, r24
     a34:	09 f1       	breq	.+66     	; 0xa78 <__stack+0x219>
		return IHexFrame;
     a36:	8c a5       	ldd	r24, Y+44	; 0x2c
     a38:	9d a5       	ldd	r25, Y+45	; 0x2d
     a3a:	99 af       	std	Y+57, r25	; 0x39
     a3c:	88 af       	std	Y+56, r24	; 0x38
     a3e:	fe 01       	movw	r30, r28
     a40:	33 96       	adiw	r30, 0x03	; 3
     a42:	fb af       	std	Y+59, r31	; 0x3b
     a44:	ea af       	std	Y+58, r30	; 0x3a
     a46:	f7 e2       	ldi	r31, 0x27	; 39
     a48:	fc af       	std	Y+60, r31	; 0x3c
     a4a:	ea ad       	ldd	r30, Y+58	; 0x3a
     a4c:	fb ad       	ldd	r31, Y+59	; 0x3b
     a4e:	00 80       	ld	r0, Z
     a50:	8a ad       	ldd	r24, Y+58	; 0x3a
     a52:	9b ad       	ldd	r25, Y+59	; 0x3b
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	9b af       	std	Y+59, r25	; 0x3b
     a58:	8a af       	std	Y+58, r24	; 0x3a
     a5a:	e8 ad       	ldd	r30, Y+56	; 0x38
     a5c:	f9 ad       	ldd	r31, Y+57	; 0x39
     a5e:	00 82       	st	Z, r0
     a60:	88 ad       	ldd	r24, Y+56	; 0x38
     a62:	99 ad       	ldd	r25, Y+57	; 0x39
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	99 af       	std	Y+57, r25	; 0x39
     a68:	88 af       	std	Y+56, r24	; 0x38
     a6a:	9c ad       	ldd	r25, Y+60	; 0x3c
     a6c:	91 50       	subi	r25, 0x01	; 1
     a6e:	9c af       	std	Y+60, r25	; 0x3c
     a70:	ec ad       	ldd	r30, Y+60	; 0x3c
     a72:	ee 23       	and	r30, r30
     a74:	51 f7       	brne	.-44     	; 0xa4a <__stack+0x1eb>
     a76:	32 c0       	rjmp	.+100    	; 0xadc <__stack+0x27d>
	}

	IHexFrame.valid = TRUE;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	89 a7       	std	Y+41, r24	; 0x29

	return IHexFrame;
     a7c:	8c a5       	ldd	r24, Y+44	; 0x2c
     a7e:	9d a5       	ldd	r25, Y+45	; 0x2d
     a80:	9e af       	std	Y+62, r25	; 0x3e
     a82:	8d af       	std	Y+61, r24	; 0x3d
     a84:	fe 01       	movw	r30, r28
     a86:	33 96       	adiw	r30, 0x03	; 3
     a88:	21 96       	adiw	r28, 0x01	; 1
     a8a:	ff af       	std	Y+63, r31	; 0x3f
     a8c:	ee af       	std	Y+62, r30	; 0x3e
     a8e:	21 97       	sbiw	r28, 0x01	; 1
     a90:	f7 e2       	ldi	r31, 0x27	; 39
     a92:	22 96       	adiw	r28, 0x02	; 2
     a94:	ff af       	std	Y+63, r31	; 0x3f
     a96:	22 97       	sbiw	r28, 0x02	; 2
     a98:	21 96       	adiw	r28, 0x01	; 1
     a9a:	ee ad       	ldd	r30, Y+62	; 0x3e
     a9c:	ff ad       	ldd	r31, Y+63	; 0x3f
     a9e:	21 97       	sbiw	r28, 0x01	; 1
     aa0:	00 80       	ld	r0, Z
     aa2:	21 96       	adiw	r28, 0x01	; 1
     aa4:	8e ad       	ldd	r24, Y+62	; 0x3e
     aa6:	9f ad       	ldd	r25, Y+63	; 0x3f
     aa8:	21 97       	sbiw	r28, 0x01	; 1
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	21 96       	adiw	r28, 0x01	; 1
     aae:	9f af       	std	Y+63, r25	; 0x3f
     ab0:	8e af       	std	Y+62, r24	; 0x3e
     ab2:	21 97       	sbiw	r28, 0x01	; 1
     ab4:	ed ad       	ldd	r30, Y+61	; 0x3d
     ab6:	fe ad       	ldd	r31, Y+62	; 0x3e
     ab8:	00 82       	st	Z, r0
     aba:	8d ad       	ldd	r24, Y+61	; 0x3d
     abc:	9e ad       	ldd	r25, Y+62	; 0x3e
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	9e af       	std	Y+62, r25	; 0x3e
     ac2:	8d af       	std	Y+61, r24	; 0x3d
     ac4:	22 96       	adiw	r28, 0x02	; 2
     ac6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ac8:	22 97       	sbiw	r28, 0x02	; 2
     aca:	91 50       	subi	r25, 0x01	; 1
     acc:	22 96       	adiw	r28, 0x02	; 2
     ace:	9f af       	std	Y+63, r25	; 0x3f
     ad0:	22 97       	sbiw	r28, 0x02	; 2
     ad2:	22 96       	adiw	r28, 0x02	; 2
     ad4:	ef ad       	ldd	r30, Y+63	; 0x3f
     ad6:	22 97       	sbiw	r28, 0x02	; 2
     ad8:	ee 23       	and	r30, r30
     ada:	f1 f6       	brne	.-68     	; 0xa98 <__stack+0x239>
}
     adc:	8c a5       	ldd	r24, Y+44	; 0x2c
     ade:	9d a5       	ldd	r25, Y+45	; 0x2d
     ae0:	cf 5b       	subi	r28, 0xBF	; 191
     ae2:	df 4f       	sbci	r29, 0xFF	; 255
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	08 95       	ret

00000afa <ASCII_To_HEX>:


static uint8 ASCII_To_HEX(uint8 ASCII)
{
     afa:	df 93       	push	r29
     afc:	cf 93       	push	r28
     afe:	00 d0       	rcall	.+0      	; 0xb00 <ASCII_To_HEX+0x6>
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	89 83       	std	Y+1, r24	; 0x01
	if((ASCII >= '0') && (ASCII <= '9'))
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	80 33       	cpi	r24, 0x30	; 48
     b0a:	40 f0       	brcs	.+16     	; 0xb1c <ASCII_To_HEX+0x22>
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	8a 33       	cpi	r24, 0x3A	; 58
     b10:	28 f4       	brcc	.+10     	; 0xb1c <ASCII_To_HEX+0x22>
	{
		return ASCII - '0';
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	98 2f       	mov	r25, r24
     b16:	90 53       	subi	r25, 0x30	; 48
     b18:	9a 83       	std	Y+2, r25	; 0x02
     b1a:	18 c0       	rjmp	.+48     	; 0xb4c <ASCII_To_HEX+0x52>
	}
	else if((ASCII >= 'A') && (ASCII <= 'F'))
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	81 34       	cpi	r24, 0x41	; 65
     b20:	40 f0       	brcs	.+16     	; 0xb32 <ASCII_To_HEX+0x38>
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	87 34       	cpi	r24, 0x47	; 71
     b26:	28 f4       	brcc	.+10     	; 0xb32 <ASCII_To_HEX+0x38>
	{
		return ASCII - 'A' + 10;
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	98 2f       	mov	r25, r24
     b2c:	97 53       	subi	r25, 0x37	; 55
     b2e:	9a 83       	std	Y+2, r25	; 0x02
     b30:	0d c0       	rjmp	.+26     	; 0xb4c <ASCII_To_HEX+0x52>
	}
	else if((ASCII >= 'a') && (ASCII <= 'f'))
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	81 36       	cpi	r24, 0x61	; 97
     b36:	40 f0       	brcs	.+16     	; 0xb48 <ASCII_To_HEX+0x4e>
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	87 36       	cpi	r24, 0x67	; 103
     b3c:	28 f4       	brcc	.+10     	; 0xb48 <ASCII_To_HEX+0x4e>
	{
		return ASCII - 'a' + 10;
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	98 2f       	mov	r25, r24
     b42:	97 55       	subi	r25, 0x57	; 87
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <ASCII_To_HEX+0x52>
	}
	else
	{
		return 255;
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <string_length>:

static uint8 string_length(uint8 str[])
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <string_length+0x6>
     b5e:	0f 92       	push	r0
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	9b 83       	std	Y+3, r25	; 0x03
     b66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count;
	/* count the string start from element 0 until the element before the NULL terminator */
	for(count = 0; str[count] != '\0'; ++count);
     b68:	19 82       	std	Y+1, r1	; 0x01
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <string_length+0x1a>
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
     b7c:	fc 01       	movw	r30, r24
     b7e:	e2 0f       	add	r30, r18
     b80:	f3 1f       	adc	r31, r19
     b82:	80 81       	ld	r24, Z
     b84:	88 23       	and	r24, r24
     b86:	91 f7       	brne	.-28     	; 0xb6c <string_length+0x14>
	return count;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
}
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <DIO_ReadChannel>:
 */


#include"DIO.h"

uint8 DIO_ReadChannel(volatile const uint8 a_PIN){
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <DIO_ReadChannel+0x6>
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_Data = 0;
     ba2:	19 82       	std	Y+1, r1	; 0x01
	if(a_PIN/8 == 0){
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	88 30       	cpi	r24, 0x08	; 8
     ba8:	f8 f4       	brcc	.+62     	; 0xbe8 <DIO_ReadChannel+0x52>
		a_Data = (PORTA_input & (1 << a_PIN));
     baa:	e9 e3       	ldi	r30, 0x39	; 57
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <DIO_ReadChannel+0x2c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	2a 95       	dec	r18
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <DIO_ReadChannel+0x28>
     bc6:	84 23       	and	r24, r20
     bc8:	89 83       	std	Y+1, r24	; 0x01
		a_Data = a_Data >> a_PIN;
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a9 01       	movw	r20, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_ReadChannel+0x48>
     bda:	55 95       	asr	r21
     bdc:	47 95       	ror	r20
     bde:	8a 95       	dec	r24
     be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_ReadChannel+0x44>
     be2:	ca 01       	movw	r24, r20
     be4:	89 83       	std	Y+1, r24	; 0x01
     be6:	6d c0       	rjmp	.+218    	; 0xcc2 <DIO_ReadChannel+0x12c>
	}
	else if(a_PIN/8 == 1)
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	88 50       	subi	r24, 0x08	; 8
     bec:	88 30       	cpi	r24, 0x08	; 8
     bee:	10 f5       	brcc	.+68     	; 0xc34 <DIO_ReadChannel+0x9e>
		a_Data = ((PORTB_input&(1 << (a_PIN-8))) >> (a_PIN-8));
     bf0:	e6 e3       	ldi	r30, 0x36	; 54
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9c 01       	movw	r18, r24
     c02:	28 50       	subi	r18, 0x08	; 8
     c04:	30 40       	sbci	r19, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <DIO_ReadChannel+0x7a>
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	2a 95       	dec	r18
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <DIO_ReadChannel+0x76>
     c14:	9a 01       	movw	r18, r20
     c16:	28 23       	and	r18, r24
     c18:	39 23       	and	r19, r25
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	08 97       	sbiw	r24, 0x08	; 8
     c22:	a9 01       	movw	r20, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_ReadChannel+0x94>
     c26:	55 95       	asr	r21
     c28:	47 95       	ror	r20
     c2a:	8a 95       	dec	r24
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_ReadChannel+0x90>
     c2e:	ca 01       	movw	r24, r20
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	47 c0       	rjmp	.+142    	; 0xcc2 <DIO_ReadChannel+0x12c>
	else if(a_PIN/8 == 2)
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	80 51       	subi	r24, 0x10	; 16
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	10 f5       	brcc	.+68     	; 0xc80 <DIO_ReadChannel+0xea>
		a_Data = ((PORTC_input&(1 << (a_PIN-16))) >> (a_PIN-16));
     c3c:	e3 e3       	ldi	r30, 0x33	; 51
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	48 2f       	mov	r20, r24
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	88 2f       	mov	r24, r24
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9c 01       	movw	r18, r24
     c4e:	20 51       	subi	r18, 0x10	; 16
     c50:	30 40       	sbci	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_ReadChannel+0xc6>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	2a 95       	dec	r18
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_ReadChannel+0xc2>
     c60:	9a 01       	movw	r18, r20
     c62:	28 23       	and	r18, r24
     c64:	39 23       	and	r19, r25
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	40 97       	sbiw	r24, 0x10	; 16
     c6e:	a9 01       	movw	r20, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <DIO_ReadChannel+0xe0>
     c72:	55 95       	asr	r21
     c74:	47 95       	ror	r20
     c76:	8a 95       	dec	r24
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <DIO_ReadChannel+0xdc>
     c7a:	ca 01       	movw	r24, r20
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	21 c0       	rjmp	.+66     	; 0xcc2 <DIO_ReadChannel+0x12c>
	else
		a_Data = ((PORTD_input&(1 << (a_PIN-24))) >> (a_PIN-24));
     c80:	e0 e3       	ldi	r30, 0x30	; 48
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9c 01       	movw	r18, r24
     c92:	28 51       	subi	r18, 0x18	; 24
     c94:	30 40       	sbci	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_ReadChannel+0x10a>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	2a 95       	dec	r18
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <DIO_ReadChannel+0x106>
     ca4:	9a 01       	movw	r18, r20
     ca6:	28 23       	and	r18, r24
     ca8:	39 23       	and	r19, r25
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	48 97       	sbiw	r24, 0x18	; 24
     cb2:	a9 01       	movw	r20, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_ReadChannel+0x124>
     cb6:	55 95       	asr	r21
     cb8:	47 95       	ror	r20
     cba:	8a 95       	dec	r24
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_ReadChannel+0x120>
     cbe:	ca 01       	movw	r24, r20
     cc0:	89 83       	std	Y+1, r24	; 0x01

	return a_Data;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <DIO_WriteChannel>:

void DIO_WriteChannel(volatile const uint8 a_PIN){
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0){
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	88 30       	cpi	r24, 0x08	; 8
     cde:	a0 f4       	brcc	.+40     	; 0xd08 <DIO_WriteChannel+0x3a>
		PORTA_output |= (1<<a_PIN);
     ce0:	ab e3       	ldi	r26, 0x3B	; 59
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	eb e3       	ldi	r30, 0x3B	; 59
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_WriteChannel+0x30>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_WriteChannel+0x2c>
     d02:	84 2b       	or	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	4c c0       	rjmp	.+152    	; 0xda0 <DIO_WriteChannel+0xd2>
	}
	else if(a_PIN/8 == 1){
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	88 50       	subi	r24, 0x08	; 8
     d0c:	88 30       	cpi	r24, 0x08	; 8
     d0e:	b8 f4       	brcc	.+46     	; 0xd3e <DIO_WriteChannel+0x70>
		PORTB_output |= (1<<(a_PIN-8));
     d10:	a8 e3       	ldi	r26, 0x38	; 56
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e3       	ldi	r30, 0x38	; 56
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	88 2f       	mov	r24, r24
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	9c 01       	movw	r18, r24
     d24:	28 50       	subi	r18, 0x08	; 8
     d26:	30 40       	sbci	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_WriteChannel+0x66>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_WriteChannel+0x62>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	31 c0       	rjmp	.+98     	; 0xda0 <DIO_WriteChannel+0xd2>
	}
	else if(a_PIN/8 == 2){
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	80 51       	subi	r24, 0x10	; 16
     d42:	88 30       	cpi	r24, 0x08	; 8
     d44:	b8 f4       	brcc	.+46     	; 0xd74 <DIO_WriteChannel+0xa6>
		PORTC_output |= (1<<(a_PIN-16));
     d46:	a5 e3       	ldi	r26, 0x35	; 53
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e3       	ldi	r30, 0x35	; 53
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9c 01       	movw	r18, r24
     d5a:	20 51       	subi	r18, 0x10	; 16
     d5c:	30 40       	sbci	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 2e       	mov	r0, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_WriteChannel+0x9c>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_WriteChannel+0x98>
     d6e:	84 2b       	or	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	16 c0       	rjmp	.+44     	; 0xda0 <DIO_WriteChannel+0xd2>
	}
	else{
		PORTD_output |= (1<<(a_PIN-24));
     d74:	a2 e3       	ldi	r26, 0x32	; 50
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e2 e3       	ldi	r30, 0x32	; 50
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 01       	movw	r18, r24
     d88:	28 51       	subi	r18, 0x18	; 24
     d8a:	30 40       	sbci	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_WriteChannel+0xca>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_WriteChannel+0xc6>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
	}
}
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <DIO_ClearChannel>:

void DIO_ClearChannel(volatile const uint8 a_PIN){
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	88 30       	cpi	r24, 0x08	; 8
     db8:	a8 f4       	brcc	.+42     	; 0xde4 <DIO_ClearChannel+0x3c>
		PORTA_output &= ~(1 << a_PIN);
     dba:	ab e3       	ldi	r26, 0x3B	; 59
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_ClearChannel+0x30>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_ClearChannel+0x2c>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	4f c0       	rjmp	.+158    	; 0xe82 <DIO_ClearChannel+0xda>
	else if(a_PIN/8 == 1)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	88 50       	subi	r24, 0x08	; 8
     de8:	88 30       	cpi	r24, 0x08	; 8
     dea:	c0 f4       	brcc	.+48     	; 0xe1c <DIO_ClearChannel+0x74>
		PORTB_output &= ~(1 << (a_PIN - 8));
     dec:	a8 e3       	ldi	r26, 0x38	; 56
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e8 e3       	ldi	r30, 0x38	; 56
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	9c 01       	movw	r18, r24
     e00:	28 50       	subi	r18, 0x08	; 8
     e02:	30 40       	sbci	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_ClearChannel+0x68>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_ClearChannel+0x64>
     e14:	80 95       	com	r24
     e16:	84 23       	and	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	33 c0       	rjmp	.+102    	; 0xe82 <DIO_ClearChannel+0xda>
	else if(a_PIN/8 == 2)
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	80 51       	subi	r24, 0x10	; 16
     e20:	88 30       	cpi	r24, 0x08	; 8
     e22:	c0 f4       	brcc	.+48     	; 0xe54 <DIO_ClearChannel+0xac>
		PORTC_output &= ~(1 << (a_PIN - 16));
     e24:	a5 e3       	ldi	r26, 0x35	; 53
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e5 e3       	ldi	r30, 0x35	; 53
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	88 2f       	mov	r24, r24
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9c 01       	movw	r18, r24
     e38:	20 51       	subi	r18, 0x10	; 16
     e3a:	30 40       	sbci	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_ClearChannel+0xa0>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_ClearChannel+0x9c>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	17 c0       	rjmp	.+46     	; 0xe82 <DIO_ClearChannel+0xda>
	else
		PORTD_output &= ~(1 << (a_PIN - 24));
     e54:	a2 e3       	ldi	r26, 0x32	; 50
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e2 e3       	ldi	r30, 0x32	; 50
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9c 01       	movw	r18, r24
     e68:	28 51       	subi	r18, 0x18	; 24
     e6a:	30 40       	sbci	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_ClearChannel+0xd0>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_ClearChannel+0xcc>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
}
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <DIO_MakeInput>:

void DIO_MakeInput(volatile const uint8 a_PIN){
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	88 30       	cpi	r24, 0x08	; 8
     e9a:	a8 f4       	brcc	.+42     	; 0xec6 <DIO_MakeInput+0x3c>
		PORTA_direction &= ~(1 << a_PIN);
     e9c:	aa e3       	ldi	r26, 0x3A	; 58
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ea e3       	ldi	r30, 0x3A	; 58
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_MakeInput+0x30>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_MakeInput+0x2c>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	4f c0       	rjmp	.+158    	; 0xf64 <DIO_MakeInput+0xda>
	else if(a_PIN/8 == 1)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	88 50       	subi	r24, 0x08	; 8
     eca:	88 30       	cpi	r24, 0x08	; 8
     ecc:	c0 f4       	brcc	.+48     	; 0xefe <DIO_MakeInput+0x74>
		PORTB_direction &= ~(1 << (a_PIN - 8));
     ece:	a7 e3       	ldi	r26, 0x37	; 55
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e7 e3       	ldi	r30, 0x37	; 55
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	9c 01       	movw	r18, r24
     ee2:	28 50       	subi	r18, 0x08	; 8
     ee4:	30 40       	sbci	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_MakeInput+0x68>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_MakeInput+0x64>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	33 c0       	rjmp	.+102    	; 0xf64 <DIO_MakeInput+0xda>
	else if(a_PIN/8 == 2)
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	80 51       	subi	r24, 0x10	; 16
     f02:	88 30       	cpi	r24, 0x08	; 8
     f04:	c0 f4       	brcc	.+48     	; 0xf36 <DIO_MakeInput+0xac>
		PORTC_direction &= ~(1 << (a_PIN - 16));
     f06:	a4 e3       	ldi	r26, 0x34	; 52
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e4 e3       	ldi	r30, 0x34	; 52
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9c 01       	movw	r18, r24
     f1a:	20 51       	subi	r18, 0x10	; 16
     f1c:	30 40       	sbci	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_MakeInput+0xa0>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_MakeInput+0x9c>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	17 c0       	rjmp	.+46     	; 0xf64 <DIO_MakeInput+0xda>
	else
		PORTD_direction &= ~(1 << (a_PIN - 24));
     f36:	a1 e3       	ldi	r26, 0x31	; 49
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e1 e3       	ldi	r30, 0x31	; 49
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9c 01       	movw	r18, r24
     f4a:	28 51       	subi	r18, 0x18	; 24
     f4c:	30 40       	sbci	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_MakeInput+0xd0>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_MakeInput+0xcc>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
}
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <DIO_MakeOutput>:

void DIO_MakeOutput(volatile const uint8 a_PIN){
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 30       	cpi	r24, 0x08	; 8
     f7c:	a0 f4       	brcc	.+40     	; 0xfa6 <DIO_MakeOutput+0x3a>
		PORTA_direction |= (1 << a_PIN);
     f7e:	aa e3       	ldi	r26, 0x3A	; 58
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ea e3       	ldi	r30, 0x3A	; 58
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_MakeOutput+0x30>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_MakeOutput+0x2c>
     fa0:	84 2b       	or	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	4c c0       	rjmp	.+152    	; 0x103e <DIO_MakeOutput+0xd2>
	else if(a_PIN/8 == 1)
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	88 50       	subi	r24, 0x08	; 8
     faa:	88 30       	cpi	r24, 0x08	; 8
     fac:	b8 f4       	brcc	.+46     	; 0xfdc <DIO_MakeOutput+0x70>
		PORTB_direction |= (1 << (a_PIN - 8));
     fae:	a7 e3       	ldi	r26, 0x37	; 55
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e7 e3       	ldi	r30, 0x37	; 55
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9c 01       	movw	r18, r24
     fc2:	28 50       	subi	r18, 0x08	; 8
     fc4:	30 40       	sbci	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_MakeOutput+0x66>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_MakeOutput+0x62>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	31 c0       	rjmp	.+98     	; 0x103e <DIO_MakeOutput+0xd2>
	else if(a_PIN/8 == 2)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	80 51       	subi	r24, 0x10	; 16
     fe0:	88 30       	cpi	r24, 0x08	; 8
     fe2:	b8 f4       	brcc	.+46     	; 0x1012 <DIO_MakeOutput+0xa6>
		PORTC_direction |= (1 << (a_PIN - 16));
     fe4:	a4 e3       	ldi	r26, 0x34	; 52
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e4 e3       	ldi	r30, 0x34	; 52
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9c 01       	movw	r18, r24
     ff8:	20 51       	subi	r18, 0x10	; 16
     ffa:	30 40       	sbci	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_MakeOutput+0x9c>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_MakeOutput+0x98>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	16 c0       	rjmp	.+44     	; 0x103e <DIO_MakeOutput+0xd2>
	else
		PORTD_direction |= (1 << (a_PIN - 24));
    1012:	a1 e3       	ldi	r26, 0x31	; 49
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e1 e3       	ldi	r30, 0x31	; 49
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 01       	movw	r18, r24
    1026:	28 51       	subi	r18, 0x18	; 24
    1028:	30 40       	sbci	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_MakeOutput+0xca>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_MakeOutput+0xc6>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
}
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DIO_ToggleChannel>:

void DIO_ToggleChannel(volatile const uint8 a_PIN){
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	88 30       	cpi	r24, 0x08	; 8
    1056:	a0 f4       	brcc	.+40     	; 0x1080 <DIO_ToggleChannel+0x3a>
		PORTA_output ^= (1 << a_PIN);
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_ToggleChannel+0x30>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_ToggleChannel+0x2c>
    107a:	84 27       	eor	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	4c c0       	rjmp	.+152    	; 0x1118 <DIO_ToggleChannel+0xd2>
	else if(a_PIN/8 == 1)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	88 50       	subi	r24, 0x08	; 8
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	b8 f4       	brcc	.+46     	; 0x10b6 <DIO_ToggleChannel+0x70>
		PORTB_output ^= (1 << (a_PIN - 8));
    1088:	a8 e3       	ldi	r26, 0x38	; 56
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e8 e3       	ldi	r30, 0x38	; 56
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9c 01       	movw	r18, r24
    109c:	28 50       	subi	r18, 0x08	; 8
    109e:	30 40       	sbci	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_ToggleChannel+0x66>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_ToggleChannel+0x62>
    10b0:	84 27       	eor	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	31 c0       	rjmp	.+98     	; 0x1118 <DIO_ToggleChannel+0xd2>
	else if(a_PIN/8 == 2)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	80 51       	subi	r24, 0x10	; 16
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	b8 f4       	brcc	.+46     	; 0x10ec <DIO_ToggleChannel+0xa6>
		PORTC_output ^= (1 << (a_PIN - 16));
    10be:	a5 e3       	ldi	r26, 0x35	; 53
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e3       	ldi	r30, 0x35	; 53
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9c 01       	movw	r18, r24
    10d2:	20 51       	subi	r18, 0x10	; 16
    10d4:	30 40       	sbci	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_ToggleChannel+0x9c>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_ToggleChannel+0x98>
    10e6:	84 27       	eor	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	16 c0       	rjmp	.+44     	; 0x1118 <DIO_ToggleChannel+0xd2>
	else
		PORTD_output ^= (1 << (a_PIN - 24));
    10ec:	a2 e3       	ldi	r26, 0x32	; 50
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e2 e3       	ldi	r30, 0x32	; 50
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9c 01       	movw	r18, r24
    1100:	28 51       	subi	r18, 0x18	; 24
    1102:	30 40       	sbci	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_ToggleChannel+0xca>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_ToggleChannel+0xc6>
    1114:	84 27       	eor	r24, r20
    1116:	8c 93       	st	X, r24
}
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <DIO_PortInput>:

void DIO_PortInput(volatile const uint8 a_PORT){
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_PortInput+0x6>
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
	/*You can also use DIO_PORTA, DIO_PORTB, DIO_PORTC, DIO_PORTD
	 * */
	switch(a_PORT){
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3b 83       	std	Y+3, r19	; 0x03
    1136:	2a 83       	std	Y+2, r18	; 0x02
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	c9 f0       	breq	.+50     	; 0x1174 <DIO_PortInput+0x54>
    1142:	2a 81       	ldd	r18, Y+2	; 0x02
    1144:	3b 81       	ldd	r19, Y+3	; 0x03
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	2c f4       	brge	.+10     	; 0x1156 <DIO_PortInput+0x36>
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	9b 81       	ldd	r25, Y+3	; 0x03
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	61 f0       	breq	.+24     	; 0x116c <DIO_PortInput+0x4c>
    1154:	1a c0       	rjmp	.+52     	; 0x118a <DIO_PortInput+0x6a>
    1156:	2a 81       	ldd	r18, Y+2	; 0x02
    1158:	3b 81       	ldd	r19, Y+3	; 0x03
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	71 f0       	breq	.+28     	; 0x117c <DIO_PortInput+0x5c>
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	9b 81       	ldd	r25, Y+3	; 0x03
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	91 05       	cpc	r25, r1
    1168:	69 f0       	breq	.+26     	; 0x1184 <DIO_PortInput+0x64>
    116a:	0f c0       	rjmp	.+30     	; 0x118a <DIO_PortInput+0x6a>
	case 0:
		PORTA_direction = 0;
    116c:	ea e3       	ldi	r30, 0x3A	; 58
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	10 82       	st	Z, r1
    1172:	0b c0       	rjmp	.+22     	; 0x118a <DIO_PortInput+0x6a>
		break;
	case 1:
		PORTB_direction = 0;
    1174:	e7 e3       	ldi	r30, 0x37	; 55
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	10 82       	st	Z, r1
    117a:	07 c0       	rjmp	.+14     	; 0x118a <DIO_PortInput+0x6a>
		break;
	case 2:
		PORTC_direction = 0;
    117c:	e4 e3       	ldi	r30, 0x34	; 52
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	10 82       	st	Z, r1
    1182:	03 c0       	rjmp	.+6      	; 0x118a <DIO_PortInput+0x6a>
		break;
	case 3:
		PORTD_direction = 0;
    1184:	e1 e3       	ldi	r30, 0x31	; 49
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	10 82       	st	Z, r1
		break;
	}
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <DIO_PortOutput>:

void DIO_PortOutput(volatile const uint8 a_PORT){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <DIO_PortOutput+0x6>
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
	/*You can also use DIO_PORTA, DIO_PORTB, DIO_PORTC, DIO_PORTD
	 * */
	switch(a_PORT){
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3b 83       	std	Y+3, r19	; 0x03
    11ac:	2a 83       	std	Y+2, r18	; 0x02
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <DIO_PortOutput+0x56>
    11b8:	2a 81       	ldd	r18, Y+2	; 0x02
    11ba:	3b 81       	ldd	r19, Y+3	; 0x03
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	2c f4       	brge	.+10     	; 0x11cc <DIO_PortOutput+0x36>
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	9b 81       	ldd	r25, Y+3	; 0x03
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <DIO_PortOutput+0x4c>
    11ca:	1e c0       	rjmp	.+60     	; 0x1208 <DIO_PortOutput+0x72>
    11cc:	2a 81       	ldd	r18, Y+2	; 0x02
    11ce:	3b 81       	ldd	r19, Y+3	; 0x03
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	81 f0       	breq	.+32     	; 0x11f6 <DIO_PortOutput+0x60>
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	81 f0       	breq	.+32     	; 0x1200 <DIO_PortOutput+0x6a>
    11e0:	13 c0       	rjmp	.+38     	; 0x1208 <DIO_PortOutput+0x72>
	case 0:
		PORTA_direction = 0xFF;
    11e2:	ea e3       	ldi	r30, 0x3A	; 58
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	80 83       	st	Z, r24
    11ea:	0e c0       	rjmp	.+28     	; 0x1208 <DIO_PortOutput+0x72>
		break;
	case 1:
		PORTB_direction = 0xFF;
    11ec:	e7 e3       	ldi	r30, 0x37	; 55
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	80 83       	st	Z, r24
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <DIO_PortOutput+0x72>
		break;
	case 2:
		PORTC_direction = 0xFF;
    11f6:	e4 e3       	ldi	r30, 0x34	; 52
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	80 83       	st	Z, r24
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <DIO_PortOutput+0x72>
		break;
	case 3:
		PORTD_direction = 0xFF;
    1200:	e1 e3       	ldi	r30, 0x31	; 49
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	80 83       	st	Z, r24
		break;
	}
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <DIO_WritePort>:

void DIO_WritePort(volatile const uint8 a_PORT, volatile const uint8 a_Data){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <DIO_WritePort+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <DIO_WritePort+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_PORT){
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	3c 83       	std	Y+4, r19	; 0x04
    122c:	2b 83       	std	Y+3, r18	; 0x03
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	91 05       	cpc	r25, r1
    1236:	d1 f0       	breq	.+52     	; 0x126c <DIO_WritePort+0x58>
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	2c f4       	brge	.+10     	; 0x124c <DIO_WritePort+0x38>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	61 f0       	breq	.+24     	; 0x1262 <DIO_WritePort+0x4e>
    124a:	1e c0       	rjmp	.+60     	; 0x1288 <DIO_WritePort+0x74>
    124c:	2b 81       	ldd	r18, Y+3	; 0x03
    124e:	3c 81       	ldd	r19, Y+4	; 0x04
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	81 f0       	breq	.+32     	; 0x1276 <DIO_WritePort+0x62>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	81 f0       	breq	.+32     	; 0x1280 <DIO_WritePort+0x6c>
    1260:	13 c0       	rjmp	.+38     	; 0x1288 <DIO_WritePort+0x74>
	case 0:
		PORTA_output = a_Data;
    1262:	eb e3       	ldi	r30, 0x3B	; 59
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	80 83       	st	Z, r24
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <DIO_WritePort+0x74>
		break;
	case 1:
		PORTB_output = a_Data;
    126c:	e8 e3       	ldi	r30, 0x38	; 56
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 83       	st	Z, r24
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <DIO_WritePort+0x74>
		break;
	case 2:
		PORTC_output = a_Data;
    1276:	e5 e3       	ldi	r30, 0x35	; 53
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	80 83       	st	Z, r24
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <DIO_WritePort+0x74>
		break;
	case 3:
		PORTD_output = a_Data;
    1280:	e2 e3       	ldi	r30, 0x32	; 50
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	80 83       	st	Z, r24
		break;
	}
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_ClearPort>:

void DIO_ClearPort(volatile const uint8 a_PORT){
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_ClearPort+0x6>
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	89 83       	std	Y+1, r24	; 0x01
	switch(a_PORT){
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3b 83       	std	Y+3, r19	; 0x03
    12ac:	2a 83       	std	Y+2, r18	; 0x02
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	9b 81       	ldd	r25, Y+3	; 0x03
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	c9 f0       	breq	.+50     	; 0x12ea <DIO_ClearPort+0x54>
    12b8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ba:	3b 81       	ldd	r19, Y+3	; 0x03
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <DIO_ClearPort+0x36>
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <DIO_ClearPort+0x4c>
    12ca:	1a c0       	rjmp	.+52     	; 0x1300 <DIO_ClearPort+0x6a>
    12cc:	2a 81       	ldd	r18, Y+2	; 0x02
    12ce:	3b 81       	ldd	r19, Y+3	; 0x03
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	71 f0       	breq	.+28     	; 0x12f2 <DIO_ClearPort+0x5c>
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	9b 81       	ldd	r25, Y+3	; 0x03
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	69 f0       	breq	.+26     	; 0x12fa <DIO_ClearPort+0x64>
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <DIO_ClearPort+0x6a>
	case 0:
		PORTA_output = 0;
    12e2:	eb e3       	ldi	r30, 0x3B	; 59
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	10 82       	st	Z, r1
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <DIO_ClearPort+0x6a>
		break;
	case 1:
		PORTB_output = 0;
    12ea:	e8 e3       	ldi	r30, 0x38	; 56
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	10 82       	st	Z, r1
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <DIO_ClearPort+0x6a>
		break;
	case 2:
		PORTC_output = 0;
    12f2:	e5 e3       	ldi	r30, 0x35	; 53
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	10 82       	st	Z, r1
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <DIO_ClearPort+0x6a>
		break;
	case 3:
		PORTD_output = 0;
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	10 82       	st	Z, r1
		break;
	}
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <HW_Init>:


#include "Bootloader_dependencies.h"

void HW_Init(void)
{
    130c:	0f 93       	push	r16
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	DIO_MakeInput(_PD0);
    1316:	88 e1       	ldi	r24, 0x18	; 24
    1318:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_MakeInput>
	DIO_MakeOutput(_PD1);
    131c:	89 e1       	ldi	r24, 0x19	; 25
    131e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_MakeOutput>
	WDG_Init();
    1322:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <WDG_Init>
	UART_Init(BIT8, Asynchronous, ONE_STOP_BIT, BAUD_115200, DISABLE_PARITY);
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	2a e0       	ldi	r18, 0x0A	; 10
    132e:	00 e0       	ldi	r16, 0x00	; 0
    1330:	0e 94 a7 09 	call	0x134e	; 0x134e <UART_Init>
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	0f 91       	pop	r16
    133a:	08 95       	ret

0000133c <MC_Reset>:

void MC_Reset(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	WDG_Reset();
    1344:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <WDG_Reset>
}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <UART_Init>:

#include "UART.h"


void UART_Init(volatile const uint8 a_NUM_DATA_BITS, volatile const uint8 a_SYNC, volatile const uint8 a_NUM_STOP_BITS, volatile const uint8 a_BAUD_RATE, volatile const uint8 a_Parity)
{
    134e:	0f 93       	push	r16
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	2f 97       	sbiw	r28, 0x0f	; 15
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	8f 83       	std	Y+7, r24	; 0x07
    1366:	68 87       	std	Y+8, r22	; 0x08
    1368:	49 87       	std	Y+9, r20	; 0x09
    136a:	2a 87       	std	Y+10, r18	; 0x0a
    136c:	0b 87       	std	Y+11, r16	; 0x0b
	uint16 baud;
	float32 fbaud;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    136e:	eb e2       	ldi	r30, 0x2B	; 43
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	80 83       	st	Z, r24
	 * UCSZ2 bits combined with UCSZ21:0 in the UCSRC sets the number
	   of data bits in a frame the receiver and transmitter use.
	   You can also use BIT5, BIT6, BIT7, BIT8, BIT9 for a_NUM_DATA_BITS
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    1376:	ea e2       	ldi	r30, 0x2A	; 42
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	88 e1       	ldi	r24, 0x18	; 24
    137c:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | (a_NUM_DATA_BITS & 0x04);
    137e:	aa e2       	ldi	r26, 0x2A	; 42
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ea e2       	ldi	r30, 0x2A	; 42
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	98 2f       	mov	r25, r24
    138a:	9b 7f       	andi	r25, 0xFB	; 251
    138c:	8f 81       	ldd	r24, Y+7	; 0x07
    138e:	84 70       	andi	r24, 0x04	; 4
    1390:	89 2b       	or	r24, r25
    1392:	8c 93       	st	X, r24
	   EVEN_PARITY, ODD_PARITY for
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (a_SYNC << UMSEL) | (a_NUM_STOP_BITS << USBS);
    1394:	e0 e4       	ldi	r30, 0x40	; 64
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	88 85       	ldd	r24, Y+8	; 0x08
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	00 24       	eor	r0, r0
    13a0:	96 95       	lsr	r25
    13a2:	87 95       	ror	r24
    13a4:	07 94       	ror	r0
    13a6:	96 95       	lsr	r25
    13a8:	87 95       	ror	r24
    13aa:	07 94       	ror	r0
    13ac:	98 2f       	mov	r25, r24
    13ae:	80 2d       	mov	r24, r0
    13b0:	28 2f       	mov	r18, r24
    13b2:	20 68       	ori	r18, 0x80	; 128
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	82 2b       	or	r24, r18
    13c8:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) |((a_Parity & 0x03) << 4);
    13ca:	a0 e4       	ldi	r26, 0x40	; 64
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e0 e4       	ldi	r30, 0x40	; 64
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	28 2f       	mov	r18, r24
    13d6:	2f 7c       	andi	r18, 0xCF	; 207
    13d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	83 70       	andi	r24, 0x03	; 3
    13e0:	90 70       	andi	r25, 0x00	; 0
    13e2:	82 95       	swap	r24
    13e4:	92 95       	swap	r25
    13e6:	90 7f       	andi	r25, 0xF0	; 240
    13e8:	98 27       	eor	r25, r24
    13ea:	80 7f       	andi	r24, 0xF0	; 240
    13ec:	98 27       	eor	r25, r24
    13ee:	82 2b       	or	r24, r18
    13f0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) |((a_NUM_DATA_BITS & 0x03) << 1);
    13f2:	a0 e4       	ldi	r26, 0x40	; 64
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e0 e4       	ldi	r30, 0x40	; 64
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	29 7f       	andi	r18, 0xF9	; 249
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	83 70       	andi	r24, 0x03	; 3
    1408:	90 70       	andi	r25, 0x00	; 0
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	82 2b       	or	r24, r18
    1410:	8c 93       	st	X, r24
	if (a_SYNC){
    1412:	88 85       	ldd	r24, Y+8	; 0x08
    1414:	88 23       	and	r24, r24
    1416:	09 f4       	brne	.+2      	; 0x141a <UART_Init+0xcc>
    1418:	97 c1       	rjmp	.+814    	; 0x1748 <UART_Init+0x3fa>
		switch(a_BAUD_RATE){
    141a:	8a 85       	ldd	r24, Y+10	; 0x0a
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3f 87       	std	Y+15, r19	; 0x0f
    1422:	2e 87       	std	Y+14, r18	; 0x0e
    1424:	8e 85       	ldd	r24, Y+14	; 0x0e
    1426:	9f 85       	ldd	r25, Y+15	; 0x0f
    1428:	85 30       	cpi	r24, 0x05	; 5
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <UART_Init+0xe2>
    142e:	de c0       	rjmp	.+444    	; 0x15ec <UART_Init+0x29e>
    1430:	2e 85       	ldd	r18, Y+14	; 0x0e
    1432:	3f 85       	ldd	r19, Y+15	; 0x0f
    1434:	26 30       	cpi	r18, 0x06	; 6
    1436:	31 05       	cpc	r19, r1
    1438:	1c f5       	brge	.+70     	; 0x1480 <UART_Init+0x132>
    143a:	8e 85       	ldd	r24, Y+14	; 0x0e
    143c:	9f 85       	ldd	r25, Y+15	; 0x0f
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <UART_Init+0xf8>
    1444:	7c c0       	rjmp	.+248    	; 0x153e <UART_Init+0x1f0>
    1446:	2e 85       	ldd	r18, Y+14	; 0x0e
    1448:	3f 85       	ldd	r19, Y+15	; 0x0f
    144a:	23 30       	cpi	r18, 0x03	; 3
    144c:	31 05       	cpc	r19, r1
    144e:	5c f4       	brge	.+22     	; 0x1466 <UART_Init+0x118>
    1450:	8e 85       	ldd	r24, Y+14	; 0x0e
    1452:	9f 85       	ldd	r25, Y+15	; 0x0f
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	c9 f1       	breq	.+114    	; 0x14ca <UART_Init+0x17c>
    1458:	2e 85       	ldd	r18, Y+14	; 0x0e
    145a:	3f 85       	ldd	r19, Y+15	; 0x0f
    145c:	21 30       	cpi	r18, 0x01	; 1
    145e:	31 05       	cpc	r19, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <UART_Init+0x116>
    1462:	50 c0       	rjmp	.+160    	; 0x1504 <UART_Init+0x1b6>
    1464:	07 c3       	rjmp	.+1550   	; 0x1a74 <UART_Init+0x726>
    1466:	8e 85       	ldd	r24, Y+14	; 0x0e
    1468:	9f 85       	ldd	r25, Y+15	; 0x0f
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <UART_Init+0x124>
    1470:	83 c0       	rjmp	.+262    	; 0x1578 <UART_Init+0x22a>
    1472:	2e 85       	ldd	r18, Y+14	; 0x0e
    1474:	3f 85       	ldd	r19, Y+15	; 0x0f
    1476:	24 30       	cpi	r18, 0x04	; 4
    1478:	31 05       	cpc	r19, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <UART_Init+0x130>
    147c:	9a c0       	rjmp	.+308    	; 0x15b2 <UART_Init+0x264>
    147e:	fa c2       	rjmp	.+1524   	; 0x1a74 <UART_Init+0x726>
    1480:	8e 85       	ldd	r24, Y+14	; 0x0e
    1482:	9f 85       	ldd	r25, Y+15	; 0x0f
    1484:	88 30       	cpi	r24, 0x08	; 8
    1486:	91 05       	cpc	r25, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <UART_Init+0x13e>
    148a:	07 c1       	rjmp	.+526    	; 0x169a <UART_Init+0x34c>
    148c:	2e 85       	ldd	r18, Y+14	; 0x0e
    148e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1490:	29 30       	cpi	r18, 0x09	; 9
    1492:	31 05       	cpc	r19, r1
    1494:	6c f4       	brge	.+26     	; 0x14b0 <UART_Init+0x162>
    1496:	8e 85       	ldd	r24, Y+14	; 0x0e
    1498:	9f 85       	ldd	r25, Y+15	; 0x0f
    149a:	86 30       	cpi	r24, 0x06	; 6
    149c:	91 05       	cpc	r25, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <UART_Init+0x154>
    14a0:	c2 c0       	rjmp	.+388    	; 0x1626 <UART_Init+0x2d8>
    14a2:	2e 85       	ldd	r18, Y+14	; 0x0e
    14a4:	3f 85       	ldd	r19, Y+15	; 0x0f
    14a6:	27 30       	cpi	r18, 0x07	; 7
    14a8:	31 05       	cpc	r19, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <UART_Init+0x160>
    14ac:	d9 c0       	rjmp	.+434    	; 0x1660 <UART_Init+0x312>
    14ae:	e2 c2       	rjmp	.+1476   	; 0x1a74 <UART_Init+0x726>
    14b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    14b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    14b4:	89 30       	cpi	r24, 0x09	; 9
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <UART_Init+0x16e>
    14ba:	0c c1       	rjmp	.+536    	; 0x16d4 <UART_Init+0x386>
    14bc:	2e 85       	ldd	r18, Y+14	; 0x0e
    14be:	3f 85       	ldd	r19, Y+15	; 0x0f
    14c0:	2a 30       	cpi	r18, 0x0A	; 10
    14c2:	31 05       	cpc	r19, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <UART_Init+0x17a>
    14c6:	23 c1       	rjmp	.+582    	; 0x170e <UART_Init+0x3c0>
    14c8:	d5 c2       	rjmp	.+1450   	; 0x1a74 <UART_Init+0x726>
		case(0):
			fbaud = ((float32)F_CPU / (100 * 2)) - 1;
    14ca:	80 e8       	ldi	r24, 0x80	; 128
    14cc:	9f e3       	ldi	r25, 0x3F	; 63
    14ce:	ac e9       	ldi	r26, 0x9C	; 156
    14d0:	b7 e4       	ldi	r27, 0x47	; 71
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	ab 83       	std	Y+3, r26	; 0x03
    14d8:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    14da:	69 81       	ldd	r22, Y+1	; 0x01
    14dc:	7a 81       	ldd	r23, Y+2	; 0x02
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	b8 c2       	rjmp	.+1392   	; 0x1a74 <UART_Init+0x726>
			break;
		case(1):
			fbaud = ((float32)F_CPU / (200 * 2)) - 1;
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	9f e3       	ldi	r25, 0x3F	; 63
    1508:	ac e1       	ldi	r26, 0x1C	; 28
    150a:	b7 e4       	ldi	r27, 0x47	; 71
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	ab 83       	std	Y+3, r26	; 0x03
    1512:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1514:	69 81       	ldd	r22, Y+1	; 0x01
    1516:	7a 81       	ldd	r23, Y+2	; 0x02
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	5f e3       	ldi	r21, 0x3F	; 63
    1524:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	9b c2       	rjmp	.+1334   	; 0x1a74 <UART_Init+0x726>
			break;
		case(2):
			fbaud = ((float32)F_CPU / (300 * 2)) - 1;
    153e:	85 e5       	ldi	r24, 0x55	; 85
    1540:	93 e5       	ldi	r25, 0x53	; 83
    1542:	a0 ed       	ldi	r26, 0xD0	; 208
    1544:	b6 e4       	ldi	r27, 0x46	; 70
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	ab 83       	std	Y+3, r26	; 0x03
    154c:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    154e:	69 81       	ldd	r22, Y+1	; 0x01
    1550:	7a 81       	ldd	r23, Y+2	; 0x02
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	5f e3       	ldi	r21, 0x3F	; 63
    155e:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	bc 01       	movw	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	7e c2       	rjmp	.+1276   	; 0x1a74 <UART_Init+0x726>
			break;
		case(3):
			fbaud = ((float32)F_CPU / (1200 * 2)) - 1;
    1578:	85 e5       	ldi	r24, 0x55	; 85
    157a:	9d e4       	ldi	r25, 0x4D	; 77
    157c:	a0 ed       	ldi	r26, 0xD0	; 208
    157e:	b5 e4       	ldi	r27, 0x45	; 69
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	ab 83       	std	Y+3, r26	; 0x03
    1586:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1588:	69 81       	ldd	r22, Y+1	; 0x01
    158a:	7a 81       	ldd	r23, Y+2	; 0x02
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	61 c2       	rjmp	.+1218   	; 0x1a74 <UART_Init+0x726>
			break;
		case(4):
			fbaud = ((float32)F_CPU / (2400 * 2)) - 1;
    15b2:	85 e5       	ldi	r24, 0x55	; 85
    15b4:	95 e4       	ldi	r25, 0x45	; 69
    15b6:	a0 e5       	ldi	r26, 0x50	; 80
    15b8:	b5 e4       	ldi	r27, 0x45	; 69
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	ab 83       	std	Y+3, r26	; 0x03
    15c0:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    15c2:	69 81       	ldd	r22, Y+1	; 0x01
    15c4:	7a 81       	ldd	r23, Y+2	; 0x02
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	44 c2       	rjmp	.+1160   	; 0x1a74 <UART_Init+0x726>
			break;
		case(5):
			fbaud = ((float32)F_CPU / (4800 * 2)) - 1;
    15ec:	85 e5       	ldi	r24, 0x55	; 85
    15ee:	95 e3       	ldi	r25, 0x35	; 53
    15f0:	a0 ed       	ldi	r26, 0xD0	; 208
    15f2:	b4 e4       	ldi	r27, 0x44	; 68
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	ab 83       	std	Y+3, r26	; 0x03
    15fa:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    15fc:	69 81       	ldd	r22, Y+1	; 0x01
    15fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	27 c2       	rjmp	.+1102   	; 0x1a74 <UART_Init+0x726>
			break;
		case(6):
			fbaud = ((float32)F_CPU / (9600 * 2)) - 1;
    1626:	85 e5       	ldi	r24, 0x55	; 85
    1628:	95 e1       	ldi	r25, 0x15	; 21
    162a:	a0 e5       	ldi	r26, 0x50	; 80
    162c:	b4 e4       	ldi	r27, 0x44	; 68
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	ab 83       	std	Y+3, r26	; 0x03
    1634:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1636:	69 81       	ldd	r22, Y+1	; 0x01
    1638:	7a 81       	ldd	r23, Y+2	; 0x02
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	0a c2       	rjmp	.+1044   	; 0x1a74 <UART_Init+0x726>
			break;
		case(7):
			fbaud = ((float32)F_CPU / (19200 * 2)) - 1;
    1660:	89 ed       	ldi	r24, 0xD9	; 217
    1662:	97 ea       	ldi	r25, 0xA7	; 167
    1664:	a3 e1       	ldi	r26, 0x13	; 19
    1666:	b4 ec       	ldi	r27, 0xC4	; 196
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	ab 83       	std	Y+3, r26	; 0x03
    166e:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1670:	69 81       	ldd	r22, Y+1	; 0x01
    1672:	7a 81       	ldd	r23, Y+2	; 0x02
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
    1698:	ed c1       	rjmp	.+986    	; 0x1a74 <UART_Init+0x726>
			break;
		case(8):
			fbaud = ((float32)F_CPU / (38400 * 2)) - 1;
    169a:	85 e5       	ldi	r24, 0x55	; 85
    169c:	95 e5       	ldi	r25, 0x55	; 85
    169e:	af e4       	ldi	r26, 0x4F	; 79
    16a0:	b3 e4       	ldi	r27, 0x43	; 67
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	ab 83       	std	Y+3, r26	; 0x03
    16a8:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    16aa:	69 81       	ldd	r22, Y+1	; 0x01
    16ac:	7a 81       	ldd	r23, Y+2	; 0x02
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	d0 c1       	rjmp	.+928    	; 0x1a74 <UART_Init+0x726>
			break;
		case(9):
			fbaud = ((float32)F_CPU / (57600 * 2)) - 1;
    16d4:	8e e8       	ldi	r24, 0x8E	; 142
    16d6:	93 ee       	ldi	r25, 0xE3	; 227
    16d8:	a9 e0       	ldi	r26, 0x09	; 9
    16da:	b3 e4       	ldi	r27, 0x43	; 67
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	ab 83       	std	Y+3, r26	; 0x03
    16e2:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    16e4:	69 81       	ldd	r22, Y+1	; 0x01
    16e6:	7a 81       	ldd	r23, Y+2	; 0x02
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	b3 c1       	rjmp	.+870    	; 0x1a74 <UART_Init+0x726>
			break;
		case(10):
			fbaud = ((float32)F_CPU / (115200 * 2)) - 1;
    170e:	8e e8       	ldi	r24, 0x8E	; 142
    1710:	93 ee       	ldi	r25, 0xE3	; 227
    1712:	a8 e8       	ldi	r26, 0x88	; 136
    1714:	b2 e4       	ldi	r27, 0x42	; 66
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	ab 83       	std	Y+3, r26	; 0x03
    171c:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    171e:	69 81       	ldd	r22, Y+1	; 0x01
    1720:	7a 81       	ldd	r23, Y+2	; 0x02
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	96 c1       	rjmp	.+812    	; 0x1a74 <UART_Init+0x726>
			break;
		}
	}
	else{
				switch(a_BAUD_RATE){
    1748:	8a 85       	ldd	r24, Y+10	; 0x0a
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3d 87       	std	Y+13, r19	; 0x0d
    1750:	2c 87       	std	Y+12, r18	; 0x0c
    1752:	8c 85       	ldd	r24, Y+12	; 0x0c
    1754:	9d 85       	ldd	r25, Y+13	; 0x0d
    1756:	85 30       	cpi	r24, 0x05	; 5
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <UART_Init+0x410>
    175c:	de c0       	rjmp	.+444    	; 0x191a <UART_Init+0x5cc>
    175e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1760:	3d 85       	ldd	r19, Y+13	; 0x0d
    1762:	26 30       	cpi	r18, 0x06	; 6
    1764:	31 05       	cpc	r19, r1
    1766:	1c f5       	brge	.+70     	; 0x17ae <UART_Init+0x460>
    1768:	8c 85       	ldd	r24, Y+12	; 0x0c
    176a:	9d 85       	ldd	r25, Y+13	; 0x0d
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	91 05       	cpc	r25, r1
    1770:	09 f4       	brne	.+2      	; 0x1774 <UART_Init+0x426>
    1772:	7c c0       	rjmp	.+248    	; 0x186c <UART_Init+0x51e>
    1774:	2c 85       	ldd	r18, Y+12	; 0x0c
    1776:	3d 85       	ldd	r19, Y+13	; 0x0d
    1778:	23 30       	cpi	r18, 0x03	; 3
    177a:	31 05       	cpc	r19, r1
    177c:	5c f4       	brge	.+22     	; 0x1794 <UART_Init+0x446>
    177e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1780:	9d 85       	ldd	r25, Y+13	; 0x0d
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	c9 f1       	breq	.+114    	; 0x17f8 <UART_Init+0x4aa>
    1786:	2c 85       	ldd	r18, Y+12	; 0x0c
    1788:	3d 85       	ldd	r19, Y+13	; 0x0d
    178a:	21 30       	cpi	r18, 0x01	; 1
    178c:	31 05       	cpc	r19, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <UART_Init+0x444>
    1790:	50 c0       	rjmp	.+160    	; 0x1832 <UART_Init+0x4e4>
    1792:	70 c1       	rjmp	.+736    	; 0x1a74 <UART_Init+0x726>
    1794:	8c 85       	ldd	r24, Y+12	; 0x0c
    1796:	9d 85       	ldd	r25, Y+13	; 0x0d
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <UART_Init+0x452>
    179e:	83 c0       	rjmp	.+262    	; 0x18a6 <UART_Init+0x558>
    17a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    17a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    17a4:	24 30       	cpi	r18, 0x04	; 4
    17a6:	31 05       	cpc	r19, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <UART_Init+0x45e>
    17aa:	9a c0       	rjmp	.+308    	; 0x18e0 <UART_Init+0x592>
    17ac:	63 c1       	rjmp	.+710    	; 0x1a74 <UART_Init+0x726>
    17ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    17b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    17b2:	88 30       	cpi	r24, 0x08	; 8
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <UART_Init+0x46c>
    17b8:	07 c1       	rjmp	.+526    	; 0x19c8 <UART_Init+0x67a>
    17ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    17bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    17be:	29 30       	cpi	r18, 0x09	; 9
    17c0:	31 05       	cpc	r19, r1
    17c2:	6c f4       	brge	.+26     	; 0x17de <UART_Init+0x490>
    17c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    17c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    17c8:	86 30       	cpi	r24, 0x06	; 6
    17ca:	91 05       	cpc	r25, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <UART_Init+0x482>
    17ce:	c2 c0       	rjmp	.+388    	; 0x1954 <UART_Init+0x606>
    17d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    17d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    17d4:	27 30       	cpi	r18, 0x07	; 7
    17d6:	31 05       	cpc	r19, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <UART_Init+0x48e>
    17da:	d9 c0       	rjmp	.+434    	; 0x198e <UART_Init+0x640>
    17dc:	4b c1       	rjmp	.+662    	; 0x1a74 <UART_Init+0x726>
    17de:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    17e2:	89 30       	cpi	r24, 0x09	; 9
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <UART_Init+0x49c>
    17e8:	0c c1       	rjmp	.+536    	; 0x1a02 <UART_Init+0x6b4>
    17ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    17ee:	2a 30       	cpi	r18, 0x0A	; 10
    17f0:	31 05       	cpc	r19, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <UART_Init+0x4a8>
    17f4:	23 c1       	rjmp	.+582    	; 0x1a3c <UART_Init+0x6ee>
    17f6:	3e c1       	rjmp	.+636    	; 0x1a74 <UART_Init+0x726>
		case(0):
			fbaud = ((float32)F_CPU / (100 * 8)) - 1;
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	9e e3       	ldi	r25, 0x3E	; 62
    17fc:	ac e9       	ldi	r26, 0x9C	; 156
    17fe:	b6 e4       	ldi	r27, 0x46	; 70
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	ab 83       	std	Y+3, r26	; 0x03
    1806:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1808:	69 81       	ldd	r22, Y+1	; 0x01
    180a:	7a 81       	ldd	r23, Y+2	; 0x02
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	bc 01       	movw	r22, r24
    1822:	cd 01       	movw	r24, r26
    1824:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	21 c1       	rjmp	.+578    	; 0x1a74 <UART_Init+0x726>
			break;
		case(1):
			fbaud = ((float32)F_CPU / (200 * 8)) - 1;
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	9c e3       	ldi	r25, 0x3C	; 60
    1836:	ac e1       	ldi	r26, 0x1C	; 28
    1838:	b6 e4       	ldi	r27, 0x46	; 70
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	ab 83       	std	Y+3, r26	; 0x03
    1840:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1842:	69 81       	ldd	r22, Y+1	; 0x01
    1844:	7a 81       	ldd	r23, Y+2	; 0x02
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	04 c1       	rjmp	.+520    	; 0x1a74 <UART_Init+0x726>
			break;
		case(2):
			fbaud = ((float32)F_CPU / (300 * 8)) - 1;
    186c:	85 e5       	ldi	r24, 0x55	; 85
    186e:	9d e4       	ldi	r25, 0x4D	; 77
    1870:	a0 ed       	ldi	r26, 0xD0	; 208
    1872:	b5 e4       	ldi	r27, 0x45	; 69
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	ab 83       	std	Y+3, r26	; 0x03
    187a:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    187c:	69 81       	ldd	r22, Y+1	; 0x01
    187e:	7a 81       	ldd	r23, Y+2	; 0x02
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	e7 c0       	rjmp	.+462    	; 0x1a74 <UART_Init+0x726>
			break;
		case(3):
			fbaud = ((float32)F_CPU / (1200 * 8)) - 1;
    18a6:	85 e5       	ldi	r24, 0x55	; 85
    18a8:	95 e3       	ldi	r25, 0x35	; 53
    18aa:	a0 ed       	ldi	r26, 0xD0	; 208
    18ac:	b4 e4       	ldi	r27, 0x44	; 68
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	ab 83       	std	Y+3, r26	; 0x03
    18b4:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    18b6:	69 81       	ldd	r22, Y+1	; 0x01
    18b8:	7a 81       	ldd	r23, Y+2	; 0x02
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
    18de:	ca c0       	rjmp	.+404    	; 0x1a74 <UART_Init+0x726>
			break;
		case(4):
			fbaud = ((float32)F_CPU / (2400 * 8)) - 1;
    18e0:	85 e5       	ldi	r24, 0x55	; 85
    18e2:	95 e1       	ldi	r25, 0x15	; 21
    18e4:	a0 e5       	ldi	r26, 0x50	; 80
    18e6:	b4 e4       	ldi	r27, 0x44	; 68
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	ab 83       	std	Y+3, r26	; 0x03
    18ee:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    18f0:	69 81       	ldd	r22, Y+1	; 0x01
    18f2:	7a 81       	ldd	r23, Y+2	; 0x02
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	8d 83       	std	Y+5, r24	; 0x05
    1918:	ad c0       	rjmp	.+346    	; 0x1a74 <UART_Init+0x726>
			break;
		case(5):
			fbaud = ((float32)F_CPU / (4800 * 8)) - 1;
    191a:	89 ed       	ldi	r24, 0xD9	; 217
    191c:	97 ea       	ldi	r25, 0xA7	; 167
    191e:	a3 e1       	ldi	r26, 0x13	; 19
    1920:	b4 ec       	ldi	r27, 0xC4	; 196
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	ab 83       	std	Y+3, r26	; 0x03
    1928:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    192a:	69 81       	ldd	r22, Y+1	; 0x01
    192c:	7a 81       	ldd	r23, Y+2	; 0x02
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
    1952:	90 c0       	rjmp	.+288    	; 0x1a74 <UART_Init+0x726>
			break;
		case(6):
			fbaud = ((float32)F_CPU / (9600 * 8)) - 1;
    1954:	8c e8       	ldi	r24, 0x8C	; 140
    1956:	9e e6       	ldi	r25, 0x6E	; 110
    1958:	a1 eb       	ldi	r26, 0xB1	; 177
    195a:	b4 e4       	ldi	r27, 0x44	; 68
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	ab 83       	std	Y+3, r26	; 0x03
    1962:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1964:	69 81       	ldd	r22, Y+1	; 0x01
    1966:	7a 81       	ldd	r23, Y+2	; 0x02
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	73 c0       	rjmp	.+230    	; 0x1a74 <UART_Init+0x726>
			break;
		case(7):
			fbaud = ((float32)F_CPU / (19200 * 8)) - 1;
    198e:	8c e8       	ldi	r24, 0x8C	; 140
    1990:	9e e4       	ldi	r25, 0x4E	; 78
    1992:	a1 e3       	ldi	r26, 0x31	; 49
    1994:	b4 e4       	ldi	r27, 0x44	; 68
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	ab 83       	std	Y+3, r26	; 0x03
    199c:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    199e:	69 81       	ldd	r22, Y+1	; 0x01
    19a0:	7a 81       	ldd	r23, Y+2	; 0x02
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	56 c0       	rjmp	.+172    	; 0x1a74 <UART_Init+0x726>
			break;
		case(8):
			fbaud = ((float32)F_CPU / (38400 * 8)) - 1;
    19c8:	85 e5       	ldi	r24, 0x55	; 85
    19ca:	95 e5       	ldi	r25, 0x55	; 85
    19cc:	ac e4       	ldi	r26, 0x4C	; 76
    19ce:	b2 e4       	ldi	r27, 0x42	; 66
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	ab 83       	std	Y+3, r26	; 0x03
    19d6:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    19d8:	69 81       	ldd	r22, Y+1	; 0x01
    19da:	7a 81       	ldd	r23, Y+2	; 0x02
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	39 c0       	rjmp	.+114    	; 0x1a74 <UART_Init+0x726>
			break;
		case(9):
			fbaud = ((float32)F_CPU / (57600 * 8)) - 1;
    1a02:	8e e8       	ldi	r24, 0x8E	; 142
    1a04:	93 ee       	ldi	r25, 0xE3	; 227
    1a06:	a6 e0       	ldi	r26, 0x06	; 6
    1a08:	b2 e4       	ldi	r27, 0x42	; 66
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	ab 83       	std	Y+3, r26	; 0x03
    1a10:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1a12:	69 81       	ldd	r22, Y+1	; 0x01
    1a14:	7a 81       	ldd	r23, Y+2	; 0x02
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
    1a3a:	1c c0       	rjmp	.+56     	; 0x1a74 <UART_Init+0x726>
			break;
		case(10):
			fbaud = ((float32)F_CPU / (115200 * 8)) - 1;
    1a3c:	8e e8       	ldi	r24, 0x8E	; 142
    1a3e:	93 ee       	ldi	r25, 0xE3	; 227
    1a40:	a2 e8       	ldi	r26, 0x82	; 130
    1a42:	b1 e4       	ldi	r27, 0x41	; 65
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	ab 83       	std	Y+3, r26	; 0x03
    1a4a:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    1a4c:	69 81       	ldd	r22, Y+1	; 0x01
    1a4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixsfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
			break;
		}
	}

	UBRRL = baud;
    1a74:	e9 e2       	ldi	r30, 0x29	; 41
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	80 83       	st	Z, r24
	UBRRH = baud >> 8;
    1a7c:	e0 e4       	ldi	r30, 0x40	; 64
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	89 2f       	mov	r24, r25
    1a86:	99 27       	eor	r25, r25
    1a88:	80 83       	st	Z, r24
}
    1a8a:	2f 96       	adiw	r28, 0x0f	; 15
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <SEND_DATA_UART>:


void SEND_DATA_UART(volatile const uint8 a_DATA){
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	0f 92       	push	r0
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, UDRE)){}
    1aaa:	eb e2       	ldi	r30, 0x2B	; 43
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	80 72       	andi	r24, 0x20	; 32
    1ab6:	90 70       	andi	r25, 0x00	; 0
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	b9 f3       	breq	.-18     	; 0x1aaa <SEND_DATA_UART+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = a_DATA;
    1abc:	ec e2       	ldi	r30, 0x2C	; 44
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	80 83       	st	Z, r24
}
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <RECEIVE_DATA_UART>:

uint8 RECEIVE_DATA_UART(void){
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA, RXC)){}
    1ad4:	eb e2       	ldi	r30, 0x2B	; 43
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 23       	and	r24, r24
    1adc:	dc f7       	brge	.-10     	; 0x1ad4 <RECEIVE_DATA_UART+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	return UDR;
    1ade:	ec e2       	ldi	r30, 0x2C	; 44
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <SEND_STRING_UART>:

void SEND_STRING_UART(const uint8 *STR){
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <SEND_STRING_UART+0x6>
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	9b 83       	std	Y+3, r25	; 0x03
    1af8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    1afa:	19 82       	std	Y+1, r1	; 0x01
    1afc:	0e c0       	rjmp	.+28     	; 0x1b1a <SEND_STRING_UART+0x30>
	while (STR[count] != '\0'){
		SEND_DATA_UART(STR[count]);
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	9b 81       	ldd	r25, Y+3	; 0x03
    1b08:	fc 01       	movw	r30, r24
    1b0a:	e2 0f       	add	r30, r18
    1b0c:	f3 1f       	adc	r31, r19
    1b0e:	80 81       	ld	r24, Z
    1b10:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <SEND_DATA_UART>
		count++;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void SEND_STRING_UART(const uint8 *STR){
	uint8 count = 0;
	while (STR[count] != '\0'){
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	9b 81       	ldd	r25, Y+3	; 0x03
    1b24:	fc 01       	movw	r30, r24
    1b26:	e2 0f       	add	r30, r18
    1b28:	f3 1f       	adc	r31, r19
    1b2a:	80 81       	ld	r24, Z
    1b2c:	88 23       	and	r24, r24
    1b2e:	39 f7       	brne	.-50     	; 0x1afe <SEND_STRING_UART+0x14>
		SEND_DATA_UART(STR[count]);
		count++;
	}
}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <SEND_BYTE_UART>:

void SEND_BYTE_UART(volatile const uint8 a_DATA){
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	0f 92       	push	r0
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE)){}
    1b48:	eb e2       	ldi	r30, 0x2B	; 43
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	80 72       	andi	r24, 0x20	; 32
    1b54:	90 70       	andi	r25, 0x00	; 0
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	b9 f3       	breq	.-18     	; 0x1b48 <SEND_BYTE_UART+0xc>
	UDR = a_DATA;
    1b5a:	ec e2       	ldi	r30, 0x2C	; 44
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	80 83       	st	Z, r24
}
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <RECEIVE_STRING_UART>:

void RECEIVE_STRING_UART(uint8 *Str){
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <RECEIVE_STRING_UART+0xa>
    1b74:	0f 92       	push	r0
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	9b 83       	std	Y+3, r25	; 0x03
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    1b7e:	19 82       	std	Y+1, r1	; 0x01
	Str[count] = RECEIVE_DATA_UART();
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	8c 01       	movw	r16, r24
    1b8c:	02 0f       	add	r16, r18
    1b8e:	13 1f       	adc	r17, r19
    1b90:	0e 94 66 0d 	call	0x1acc	; 0x1acc <RECEIVE_DATA_UART>
    1b94:	f8 01       	movw	r30, r16
    1b96:	80 83       	st	Z, r24
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <RECEIVE_STRING_UART+0x4e>
	while(Str[count] != '\n')
	{
		count++;
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	8f 5f       	subi	r24, 0xFF	; 255
    1b9e:	89 83       	std	Y+1, r24	; 0x01
		Str[count] = RECEIVE_DATA_UART();
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	8c 01       	movw	r16, r24
    1bac:	02 0f       	add	r16, r18
    1bae:	13 1f       	adc	r17, r19
    1bb0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <RECEIVE_DATA_UART>
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	80 83       	st	Z, r24
}

void RECEIVE_STRING_UART(uint8 *Str){
	uint8 count = 0;
	Str[count] = RECEIVE_DATA_UART();
	while(Str[count] != '\n')
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	e2 0f       	add	r30, r18
    1bc6:	f3 1f       	adc	r31, r19
    1bc8:	80 81       	ld	r24, Z
    1bca:	8a 30       	cpi	r24, 0x0A	; 10
    1bcc:	31 f7       	brne	.-52     	; 0x1b9a <RECEIVE_STRING_UART+0x30>
	{
		count++;
		Str[count] = RECEIVE_DATA_UART();
	}
	Str[count] = '\0';
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	fc 01       	movw	r30, r24
    1bda:	e2 0f       	add	r30, r18
    1bdc:	f3 1f       	adc	r31, r19
    1bde:	10 82       	st	Z, r1
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	08 95       	ret

00001bf0 <WDG_Init>:
#include "common_macros.h"
#include "micro_config.h"
#include "WDG.h"

void WDG_Init(void)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62

}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <WDG_Reset>:

void WDG_Reset(void)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62

}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <main>:


#include "Bootloader.h"

int main(void)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0

}
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <__prologue_saves__>:
    1c1e:	2f 92       	push	r2
    1c20:	3f 92       	push	r3
    1c22:	4f 92       	push	r4
    1c24:	5f 92       	push	r5
    1c26:	6f 92       	push	r6
    1c28:	7f 92       	push	r7
    1c2a:	8f 92       	push	r8
    1c2c:	9f 92       	push	r9
    1c2e:	af 92       	push	r10
    1c30:	bf 92       	push	r11
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	ca 1b       	sub	r28, r26
    1c48:	db 0b       	sbc	r29, r27
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	09 94       	ijmp

00001c56 <__epilogue_restores__>:
    1c56:	2a 88       	ldd	r2, Y+18	; 0x12
    1c58:	39 88       	ldd	r3, Y+17	; 0x11
    1c5a:	48 88       	ldd	r4, Y+16	; 0x10
    1c5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c60:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c62:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c64:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c66:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c68:	b9 84       	ldd	r11, Y+9	; 0x09
    1c6a:	c8 84       	ldd	r12, Y+8	; 0x08
    1c6c:	df 80       	ldd	r13, Y+7	; 0x07
    1c6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1c70:	fd 80       	ldd	r15, Y+5	; 0x05
    1c72:	0c 81       	ldd	r16, Y+4	; 0x04
    1c74:	1b 81       	ldd	r17, Y+3	; 0x03
    1c76:	aa 81       	ldd	r26, Y+2	; 0x02
    1c78:	b9 81       	ldd	r27, Y+1	; 0x01
    1c7a:	ce 0f       	add	r28, r30
    1c7c:	d1 1d       	adc	r29, r1
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	ed 01       	movw	r28, r26
    1c8a:	08 95       	ret

00001c8c <_exit>:
    1c8c:	f8 94       	cli

00001c8e <__stop_program>:
    1c8e:	ff cf       	rjmp	.-2      	; 0x1c8e <__stop_program>
